#ifndef LMM_CALIBRATION_ATMSWAPTIONSTRUCTUREDDATA_H
#define LMM_CALIBRATION_ATMSWAPTIONSTRUCTUREDDATA_H
#pragma once

#include <stdlib.h>
#include <vector>
#include <string>

#include <boost/shared_ptr.hpp>

#include <LMM/helper/Name.h>
#include <LMM/helper/LMMTenorStructure.h>
#include <LMM/instrument/VanillaSwaption.h>
#include <LMM/calibration/TestHGVolatilityParam.h>
#include <LMM/pricer/LmmVanillaSwaptionApproxPricer_Rebonato.h>
#include <LMM/calibration/ATMSwaptionMarketData.h>

class ATMSwaptionMarketData; //predeclaration of a friend class

/*! \class ATMSwaptionStructuredData
 *
 *  A simple class that hold all data for ATMSwaption at the dates defined in the LMMTenorStructure
 *  The big different of this data class from ATMSwaptionMarketData is the latter is read-only, the former is 
 *  a read-write data, that have several additional then the data loading from a csv file.
 *
 *  These data are similarly as ATMSwaptionMarketData, but only at the date choosen, setted in LMMTenorStructure
 *  If a date node at LMMTenorStructure that does not exist in market data, an interpolation will perform
 *
 *  - start dates of LIBORS          Tk           k=0,1... 
 *  - Libors                         L(0,Ti,Tj)
 *  - Libors shift                   
 *  - Maturities of ZC               Tk           k=0,1...
 *  - ZeroCoupons                    P(0,Tk)
 *  - Numeraires                     Dk           k=0,1...    // computed from Zero Coupon
 *
 * This data structure can not hold the same loaded data structure as a matrix because for a fixed horizon
 * in number of years, not all Swaptions can be traited. So here put all plat data in vector structure.
 * The most important is these data are coherent in their indices.
 *
 *  - Vector of Swap Rate (Strike)
 *  - Vector of Volatilities
 *  - Vector of Swaption
 *  
 * We use also methods in VanilaSwaptionPricer to precompute the
 *  - Vector of Annuities ( each annuities correspond to a swaption)
 *  - Matrix of Omega0    ( each row corerspond to a Vector of Omega0 of a swaption)
 *
 * Note that a Omega0 vector correspond to a swaption need only be computed from startSwaptionIndex to endSwaptionIndex
 * But we compute the Omega0 vector on the whole timeline of Libor, i.e from 0 to N. This is a precompute so that do not 
 * take to much time, and that help to have the coherent of the mathematical formula
 *
 *    S_{\alpha,\beta} = \sum_{\alpha}^{\beta-1} \omega_i L_i
 */


class ATMSwaptionStructuredData
{
public:
		
	typedef std::vector<double>          RealVector     ;
	typedef std::vector<RealVector>      RealMatrix     ;
	typedef std::vector<VanillaSwaption> SwaptionVector ;
	typedef std::vector<SwaptionVector>  SwaptionMatrix ;

	typedef TestHGVolatilityParam::VectorOfMatrixIndices VectorOfMatrixIndices;
	typedef std::vector<VectorOfMatrixIndices>           MatrixOfMatrixIndices;

	ATMSwaptionStructuredData(const LMMTenorStructure_PTR& pLMMTenorStructure);

	/*! generate MarketData, 
	 *		- use a constant interest rate, compute all zero coupon and init libor, numeraire 
	 *		- if noise are different than zero, a additive absolute noise will be added to these zero coupon
	 *
	 *		- create full swaption matrix (every possible maturities & expirities)
	 *		- Swaprate are computed from init libors
	 *		- use a approximative swaption pricer to create a full ATM swaption matrix, Black Vol  
	 */
	void generateMarketData( const Tenor& fixedtenor, 
							 const Tenor& floattenor, 
							 LmmVanillaSwaptionApproxPricer_Rebonato* ptr,
							 const double constant_rate=0.03, const double noise=0) ;


	/*! - Parse the data from MarketData, take only data coherent with LMMTenorStructure dates, if these dates
	 *    does not exists int Libor or ZC maturities, data will be interpolated 
	 *  - Create appropriated VanillaSwaption giving the fixed Tenor and floatting Tenor for each case in Swaptions matrix 
	 */
	void parseFromMarketData(const ATMSwaptionMarketData& marketdata, 
		                     const Tenor& fixedtenor, 
							 const Tenor& floattenor) ;
		
	const LMMTenorStructure_PTR get_LMMTenorStructure()  const ;	

	//! get the number of Libors init, which is the same number of ZC, libor shift, numeraire, 
	size_t get_nbLIBOR()    const ;

	//! get the number of Swaptions, which is the same number of Vols, Strikes retreived from ATM Swaption data
	size_t get_nbSWAPTION() const ;

	/*! setters
	 *  you have to know the Number of Swaption before using these method
	 */
	double & swaprate    ( size_t i ) ; // use for setting the i-th swaprate in this data container           
	double & strike      ( size_t i ) ; // use for setting the i-th swaption's strike in this data container
	double & libor_shift ( size_t k ) ; // use for setting the k-th libor shift in this data container

	//! getters
	const std::vector<double> & get_LIBOR_INIT()         const ;
	//const std::vector<double> & get_LIBOR_SHIFT()        const ;
	const std::vector<double> & get_ZC_BOND()            const ;
	const std::vector<double> & get_ZC_MATURITIES()      const ;
	const std::vector<double> & get_LIBOR_STARTDATES()   const ;
	const std::vector<double> & get_NUMERAIRE()          const ;

	const RealVector &           get_SWAPRATE_VECTOR()       const ;
	const RealVector &           get_VOLATILITY_VECTOR()     const ;
	const SwaptionVector &       get_SWAPTION_VECTOR()       const ;
	const std::vector<size_t>&   get_SWPN_MATURITY_INDICES() const ;
	const MatrixOfMatrixIndices& get_HGVOL_MATRIX_INDICES()  const ;
	const VectorOfMatrixIndices& get_HGVOL_VECTOR_INDICES()  const ;
	const SwaptionMatrix&        get_SWPN_MATRIX()           const ;
	const RealMatrix    &        get_MKT_VOL_MATRIX()        const ;

	// use for test and debug, check if the parsed data are coherent
	bool check_data_consistance()          const ; 
	// print information into a file
	void print(const std::string& filename) const;	

private:

	const LMMTenorStructure_PTR pLMMTenorStructure_ ;	

	//! not that these data of libor, ZC and numeraire does not exist for date 0 (which is theoretical date)
	//  We add this date in our structure in order to have the conveniant theoretical.
	std::vector<double> LIBOR_STARTDATES_ ;
	std::vector<double> LIBOR_INIT_       ;
	std::vector<double> ZC_MATURITIES_    ;
	std::vector<double> ZC_BOND_          ;	
	std::vector<double> NUMERAIRE_        ;

	RealVector     SWAPRATE_VECTOR_              ;
	RealVector     VOLATILITY_VECTOR_            ;		
	SwaptionVector SWAPTION_VECTOR_              ;
	std::vector<size_t>   SWPN_MATURITY_INDICES_ ;
	//! all indices in HG vol match will all swaption in SWAPTION_VECTOR_
	VectorOfMatrixIndices HGVOL_VECTOR_INDICES_  ;

	/*! for each maturity, there are a set of swaption that has EXACTLY this maturity
	 *  this set of swaption depend into a set of vols coeff in the hg matrix,
	 *  this matrix store every dependent pair indices of vol corresponding to this specific maturity
	 *  NOTE : this matrix does not store full dependent indices, but sparsely
	 *         In the way that the number of stored vol coeff equal to the number of swaption
	 */ 	
	RealMatrix            MKT_VOL_MATRIX_        ;
	SwaptionMatrix        SWPN_MATRIX_           ;
	MatrixOfMatrixIndices HGVOL_MATRIX_INDICES_  ;	

	//clear all data, only ATMSwaptionMarketData can call this functions
	void clear_all_data()     ; // clear every data
	void clear_all_LIBOR_ZC() ; // clear all LIBOR, ZC their maturities, and NUMERAIRE 
	void clear_all_SWAPTION_DATA() ; // clear all SWAPRATE, VOLATILITY, and SWAPTION vectors
	
	//! parse and interpolate libor and zero coupond bonds from market data
	//! in coherent with the floating legs dates
	void parse_LIBORs_ZCs(const ATMSwaptionMarketData& marketdata, const Tenor& floattenor);

	//! precompute ne numeraire from Zero Coupons
	void pre_cmp_Numeraire();

	//! generate full LIBOR, Zerocouponds, maturities, numeraires ... data
	//! every floattenor step, we create a 'simulated' interest rate data
	//! if noise == 0, generate in a determinist way
	//! if noise != 0, generate data with a small noise
	void generateLIBOR_ZC_Data(const double constant_rate=0.03, const double noise=0); //noise < rate

	//! generate full swaption matrix data : vol, swaprate, strike using approximation VanillaSwaptionPricer
	//! every floattenor step, we create a 'simulated swaption'
	void generateSwaptionData(const Tenor& fixedtenor, 
		                      const Tenor& floattenor, 
							  LmmVanillaSwaptionApproxPricer_Rebonato* ptr);


};

typedef boost::shared_ptr<ATMSwaptionStructuredData> ATMSwaptionStructuredData_PTR;

#endif /* LMM_CALIBRATION_ATMSWAPTIONSTRUCTUREDDATA_H */