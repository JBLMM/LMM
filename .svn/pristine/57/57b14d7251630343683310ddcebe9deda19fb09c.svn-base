#include <iostream>

#include <LMM/Test/Tests.h>
#include <LMM/helper/TenorType.h>
#include <LMM/helper/LMMTenorStructure.h>
#include <LMM/LmmModel/Shifted_HGVolatilityFunction.h>

#include <LMM/calibration/TestHGVolatilityParam.h>

void test_HGVolatility_getter_by_indices();
void test_HGVolatility_setter_by_column_indices();
void test_HGVolatility_setter_by_grid_indices();

void test_HGVolatility()
{
	test_HGVolatility_getter_by_indices();
	test_HGVolatility_setter_by_column_indices();
	test_HGVolatility_setter_by_grid_indices();
}

void test_HGVolatility_setter_by_grid_indices()
{
		std::cout<<"test_HGVolatility_setter_by_grid_indices() Called"<<std::endl;
	Tenor tenorType = Tenor::_6M;
	size_t horizonYear = 5;
	LMMTenorStructure_PTR pLMMTenorStructure(new LMMTenorStructure(tenorType, horizonYear));
	size_t nbLIBOR = pLMMTenorStructure->get_nbLIBOR();

	double a = 0.0;
	double b = 0.0;
	double c = 0.0;
	double d = 1.;
	HGVolatilityParam_PTR pHGVolatilityParam (new TestHGVolatilityParam(pLMMTenorStructure,a,b,c,d) ) ;
	//HGVolatilityFunction_PTR pHGVolatilityFunction (new HGVolatilityFunction(*pHGVolatilityParam ,  pLMMTenorStructure) ); 

	TestHGVolatilityParam::VectorOfMatrixIndices empty_indices;

	QuantLib::Array full_vol_g_param = pHGVolatilityParam->get_ArrayFrom_G(empty_indices);

	size_t nbFullParam = full_vol_g_param.size();
	for(size_t i=0;i<nbFullParam;++i)
	{
		full_vol_g_param[i] = 0.01 * (i+1);
	}

	std::cout<<"Vol Param before full reset : "<<std::endl<<*pHGVolatilityParam<<std::endl;
	pHGVolatilityParam->reset_G_FromArray(full_vol_g_param,empty_indices);
	std::cout<<"Vol Param after full reset : "<<std::endl<<*pHGVolatilityParam<<std::endl;
	pHGVolatilityParam->print("test_HGVolatility_setter_by_grid_indices_VolInit.csv");

	std::vector< std::pair<size_t,size_t> > grid_indice;
	grid_indice.push_back(std::pair<size_t,size_t>(2,2));
	grid_indice.push_back(std::pair<size_t,size_t>(4,2));
	grid_indice.push_back(std::pair<size_t,size_t>(6,2));
	grid_indice.push_back(std::pair<size_t,size_t>(8,2));
	grid_indice.push_back(std::pair<size_t,size_t>(4,4));
	grid_indice.push_back(std::pair<size_t,size_t>(6,4));
	grid_indice.push_back(std::pair<size_t,size_t>(8,4));
	grid_indice.push_back(std::pair<size_t,size_t>(6,6));
	grid_indice.push_back(std::pair<size_t,size_t>(8,6));
	grid_indice.push_back(std::pair<size_t,size_t>(8,8));

	QuantLib::Array regular_grid_vol = pHGVolatilityParam->get_ArrayFrom_G( grid_indice );

	// setting the value of vol column
	double sparse_value_counter=2;
	for( size_t i=0;i<regular_grid_vol.size() ; ++i){ regular_grid_vol[i]=sparse_value_counter;sparse_value_counter+=2; }

	pHGVolatilityParam->reset_G_FromArray(regular_grid_vol , grid_indice , true);

	std::cout<<"Vol Param after  reset and interpolate regular grid : "<<std::endl<<*pHGVolatilityParam<<std::endl;
	pHGVolatilityParam->print("test_HGVolatility_setter_by_grid_indices_VolResetted.csv");

}

void test_HGVolatility_setter_by_column_indices()
{
	std::cout<<"test_HGVolatility_setter_by_column_indices() Called"<<std::endl;
	Tenor tenorType = Tenor::_6M;
	size_t horizonYear = 5;
	LMMTenorStructure_PTR pLMMTenorStructure(new LMMTenorStructure(tenorType, horizonYear));
	size_t nbLIBOR = pLMMTenorStructure->get_nbLIBOR();

	double a = 0.0;
	double b = 0.0;
	double c = 0.0;
	double d = 1.;
	HGVolatilityParam_PTR pHGVolatilityParam (new TestHGVolatilityParam(pLMMTenorStructure,a,b,c,d) ) ;
	//HGVolatilityFunction_PTR pHGVolatilityFunction (new HGVolatilityFunction(*pHGVolatilityParam ,  pLMMTenorStructure) ); 

	TestHGVolatilityParam::VectorOfMatrixIndices empty_indices;

	QuantLib::Array full_vol_g_param = pHGVolatilityParam->get_ArrayFrom_G(empty_indices);

	size_t nbFullParam = full_vol_g_param.size();
	for(size_t i=0;i<nbFullParam;++i)
	{
		full_vol_g_param[i] = 0.01 * (i+1);
	}

	std::cout<<"Vol Param before full reset : "<<std::endl<<*pHGVolatilityParam<<std::endl;
	pHGVolatilityParam->reset_G_FromArray(full_vol_g_param,empty_indices);
	std::cout<<"Vol Param after full reset : "<<std::endl<<*pHGVolatilityParam<<std::endl;
	pHGVolatilityParam->print("test_HGVolatility_setter_by_column_indices_VolInit.csv");

	std::vector< std::pair<size_t,size_t> > column1_indice;
	column1_indice.push_back(std::pair<size_t,size_t>(2,2));
	column1_indice.push_back(std::pair<size_t,size_t>(4,2));
	column1_indice.push_back(std::pair<size_t,size_t>(6,2));
	column1_indice.push_back(std::pair<size_t,size_t>(8,2));
	std::vector< std::pair<size_t,size_t> > column2_indice;
	column2_indice.push_back(std::pair<size_t,size_t>(4,4));
	column2_indice.push_back(std::pair<size_t,size_t>(6,4));
	column2_indice.push_back(std::pair<size_t,size_t>(8,4));
	std::vector< std::pair<size_t,size_t> > column3_indice;
	column3_indice.push_back(std::pair<size_t,size_t>(6,6));
	column3_indice.push_back(std::pair<size_t,size_t>(8,6));
	std::vector< std::pair<size_t,size_t> > column4_indice;
	column4_indice.push_back(std::pair<size_t,size_t>(8,8));

	QuantLib::Array sparse_vol_column1 = pHGVolatilityParam->get_ArrayFrom_G(column1_indice);
	QuantLib::Array sparse_vol_column2 = pHGVolatilityParam->get_ArrayFrom_G(column2_indice);
	QuantLib::Array sparse_vol_column3 = pHGVolatilityParam->get_ArrayFrom_G(column3_indice);
	QuantLib::Array sparse_vol_column4 = pHGVolatilityParam->get_ArrayFrom_G(column4_indice);

	// setting the value of vol column
	double sparse_value_counter=2;
	for( size_t i=0;i<sparse_vol_column1.size() ; ++i){ sparse_vol_column1[i]=sparse_value_counter;sparse_value_counter+=2; }
	for( size_t i=0;i<sparse_vol_column2.size() ; ++i){ sparse_vol_column2[i]=sparse_value_counter;sparse_value_counter+=2; }
	for( size_t i=0;i<sparse_vol_column3.size() ; ++i){ sparse_vol_column3[i]=sparse_value_counter;sparse_value_counter+=2; }
	for( size_t i=0;i<sparse_vol_column4.size() ; ++i){ sparse_vol_column4[i]=sparse_value_counter;sparse_value_counter+=2; }

	std::cout<<"Vol Param before sparse reset : "<<std::endl<<*pHGVolatilityParam<<std::endl;
	pHGVolatilityParam->reset_G_FromArray(sparse_vol_column1,column1_indice,true);
	std::cout<<"Vol Param after  reset and interpolate 1: "<<std::endl<<*pHGVolatilityParam<<std::endl;
	pHGVolatilityParam->print("test_HGVolatility_setter_by_column_indices_VolResetted1.csv");
	pHGVolatilityParam->reset_G_FromArray(sparse_vol_column2,column2_indice,true);
	std::cout<<"Vol Param after  reset and interpolate 2: "<<std::endl<<*pHGVolatilityParam<<std::endl;
	pHGVolatilityParam->print("test_HGVolatility_setter_b_columny_indices_VolResetted2.csv");
	pHGVolatilityParam->reset_G_FromArray(sparse_vol_column3,column3_indice,true);
	std::cout<<"Vol Param after  reset and interpolate 3: "<<std::endl<<*pHGVolatilityParam<<std::endl;
	pHGVolatilityParam->print("test_HGVolatility_setter_by_column_indices_VolResetted3.csv");
	pHGVolatilityParam->reset_G_FromArray(sparse_vol_column4,column4_indice,true);
	std::cout<<"Vol Param after  reset and interpolate 4: "<<std::endl<<*pHGVolatilityParam<<std::endl;
	pHGVolatilityParam->print("test_HGVolatility_setter_by_column_indices_VolResetted4.csv");
}

void test_HGVolatility_getter_by_indices()
{
	std::cout<<"test_HGVolatility_getter_by_indices() Called"<<std::endl;

	Tenor tenorType = Tenor::_6M;
	size_t horizonYear = 2;
	LMMTenorStructure_PTR pLMMTenorStructure(new LMMTenorStructure(tenorType, horizonYear));
	size_t nbLIBOR = pLMMTenorStructure->get_nbLIBOR();

	//T   0  0.5   1   1.5  2.0
	//h0  0   0    0    0   0 
	//h1  0   1
	//h2  0 1.5    1
	//h3  0   2  1.5    1 
	//h4  0 2.5    2  1.5   1
	//! volatility function
	double a = 1.0;
	double b = 1.0;
	double c = 0.0;
	double d = 0.0;
	HGVolatilityParam_PTR abcdParams_ptr( new HGVolatilityParam(pLMMTenorStructure,a,b,c,d));

	//! Correlation 1
	size_t nbFactor       = 3; // need to test nbFactor  = 3, and nbFactor = 
	size_t correlFullRank = pLMMTenorStructure->get_horizon()+1;
	size_t correlReducedRank = nbFactor;
	CorrelationReductionType::CorrelationReductionType correlReductionType = CorrelationReductionType::PCA;
	double correlAlpha = 0.0;
	double correlBeta  = 0.1;
	Correlation_PTR correlation(new XY_beta_Correlation(correlFullRank,correlReducedRank, correlReductionType,correlAlpha,correlBeta));
	correlation->calculate(); // for print.
	correlation->print("test_McTerminalLmm_Correlation.csv");

	//McLmm
	double shiftValue = -0.01;
	std::vector<double> shifts(pLMMTenorStructure->get_horizon()+1, shiftValue);


	Shifted_HGVolatilityFunction_PTR pHGVolatilityFunction (new Shifted_HGVolatilityFunction(abcdParams_ptr,  pLMMTenorStructure, correlation, shifts)); 

	std::cout<<"Vol_1 at t=0.  is "<< pHGVolatilityFunction->get_varSigma_timeContinuousVersion( 1,0. ) <<std::endl;
	std::cout<<"Vol_4 at t=0.  is "<< pHGVolatilityFunction->get_varSigma_timeContinuousVersion( 4,0. ) <<std::endl;
	std::cout<<"Vol_4 at t=2.  is "<< pHGVolatilityFunction->get_varSigma_timeContinuousVersion( 4,2. ) <<std::endl;
		
	std::cout<<"Vol_4 at t=1.4999999999999 is "<< pHGVolatilityFunction->get_varSigma_timeContinuousVersion( 4, 1.4999999999999 ) <<std::endl;
	std::cout<<"Vol_4 at t=1.5  is "<< pHGVolatilityFunction->get_varSigma_timeContinuousVersion( 4, 1.5)<<std::endl;
	std::cout<<"Vol_4 at t=1.5000000000001 is "<< pHGVolatilityFunction->get_varSigma_timeContinuousVersion( 4, 1.5000000000001 ) <<std::endl;

	//! test reset from array for TestHGVolatilityParam
	TestHGVolatilityParam testHGVolParam( pLMMTenorStructure , 0 , 0 , 0 , 1 );
	size_t nbVol = nbLIBOR*(nbLIBOR-1)/2;
	QuantLib::Array plat_vol_array(nbVol);
	TestHGVolatilityParam::VectorOfMatrixIndices indices_vector;
	size_t array_index = 0;
	for(size_t liborIndex=1;liborIndex<nbLIBOR;++liborIndex)
	{
		for(size_t timeIndex=1;timeIndex<=liborIndex;++timeIndex)
		{
			plat_vol_array[array_index]=array_index+1;
			indices_vector.push_back( std::pair<size_t,size_t>(liborIndex,timeIndex) );
			++array_index;
		}	
	}

	std::cout<<"HGVol before reset  "<<std::endl<< testHGVolParam <<std::endl;
	testHGVolParam.reset_H_FromArray(plat_vol_array,indices_vector );
	std::cout<<"HGVol afer H reset  "<<std::endl<< testHGVolParam <<std::endl;
	testHGVolParam.reset_G_FromArray(plat_vol_array,indices_vector );
	std::cout<<"HGVol afer G reset  "<<std::endl<< testHGVolParam <<std::endl;

	std::vector< std::pair<size_t,size_t> > indice_vector;

	indice_vector.push_back(std::pair<size_t,size_t>(1,1) );
	indice_vector.push_back(std::pair<size_t,size_t>(4,1) );
	indice_vector.push_back(std::pair<size_t,size_t>(4,4) );

	QuantLib::Array sparse_g_vol = testHGVolParam.get_ArrayFrom_G(indice_vector);

	std::cout<<sparse_g_vol<<std::endl;
}