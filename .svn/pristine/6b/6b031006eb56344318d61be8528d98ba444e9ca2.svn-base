#include <LMM/LmmModel/UpperTriangleVanillaSwaptionQuotes.h>
#include <LMM/helper/GenericPath.h>

#include <fstream>

// ====   LIBOR QUOTE   ====  LIBOR QUOTE   ====  LIBOR QUOTE   ====  LIBOR QUOTE   ====  //
LiborQuotes::LiborQuotes(LMMTenorStructure_PTR lmmTenorStructure_ptr, const double constant_rate)
: lmmTenorStructure_(lmmTenorStructure_ptr) 
{
	generate_DiscountFactor(constant_rate) ;
	initiate_Libors_from_DiscountFactor()  ;
}

void LiborQuotes::generate_DiscountFactor(const double constant_rate)
{
	size_t nbDF = lmmTenorStructure_->get_nbLIBOR() +1 ;
	assert(nbDF>2);

	discountFactor_.resize( nbDF );
	for(size_t i=0;i<nbDF;++i)
	{
		const double date_T_i = lmmTenorStructure_->get_tenorDate(i);
		discountFactor_[i]= std::exp( - (constant_rate * date_T_i) );
	}
}


void LiborQuotes::initiate_Libors_from_DiscountFactor()
{
	size_t nbLibor = discountFactor_.size() - 1;
	assert( nbLibor > 0 );//number of discounfactor >=3 in order to generate the Libors
	assert(nbLibor == lmmTenorStructure_->get_nbLIBOR() );

	liborInit_.resize(nbLibor);
	for(size_t iLibor=0;iLibor<nbLibor;++iLibor)
	{
		const double tau_i = lmmTenorStructure_->get_deltaT(iLibor);
		liborInit_[iLibor] = 1./tau_i *( discountFactor_[iLibor]/discountFactor_[iLibor+1] - 1. );
	}
}

// ====    END LIBOR QUOTE   ====    END LIBOR QUOTE   ====    END LIBOR QUOTE   ====    END LIBOR QUOTE   ====  //


UpperTriangleVanillaSwaptionQuotes::UpperTriangleVanillaSwaptionQuotes(
	LMMTenorStructure_PTR lmmTenorStructure,
	int   lastYear, 	
	const Tenor& fixedTenor,
	const Tenor& floatingTenor,
	const UpperTriangleDoubleMatrix& strikes, // 1st row and column not used like g!
	const UpperTriangleDoubleMatrix& quotes)  // 1st row and column not used like g!
	: lmmTenorStructure_(lmmTenorStructure)
	, lastYear_(lastYear)
	, fixedTenor_(fixedTenor)
	, floatingTenor_(floatingTenor)
	, indexRatio_(fixedTenor.NbOfMonth()/floatingTenor.NbOfMonth())
	, upperTriangleVanillaSwaptionQuotes_(lastYear+1, lastYear+1)
	, indexMapping_gDelegate_gTransformed_(lastYear+1, lastYear+1)
{
	assert(lmmTenorStructure_->get_horizon() == lastYear*indexRatio_); 
	assert(lastYear>1);
	assert(strikes.size1() == strikes.size2() && strikes.size1() == lastYear_+1); 
	assert(quotes.size1()  == quotes.size2()  && quotes.size1()  == lastYear_+1);
	assert(fixedTenor.NbOfMonth() == 12 && fixedTenor.NbOfMonth()%floatingTenor.NbOfMonth() ==0);
	assert(lmmTenorStructure->get_tenorType() == floatingTenor);

	//! upperTriangle:
	for(size_t iExpirity = 1; iExpirity<quotes.size1(); ++iExpirity) // row
	{
		for(size_t jTenor = 1; jTenor<quotes.size2()-iExpirity; ++jTenor) // col
		{
			double strike = strikes(iExpirity,jTenor);
			size_t indexStart = computeStartIndex(iExpirity);
			size_t indexEnd   = computeIndexEnd(iExpirity,jTenor);
			VanillaSwap  vanillaSwap(strike, indexStart, indexEnd, floatingTenor_, fixedTenor_, lmmTenorStructure);
			VanillaSwaption vanillaSwaption(vanillaSwap, OptionType::OptionType::CALL);

			double quote = quotes(iExpirity,jTenor);

			std::pair<VanillaSwaption, double> p(vanillaSwaption, quote);

			upperTriangleVanillaSwaptionQuotes_(iExpirity,jTenor) = p;
		}
	}

	initialize_gDelegate_IndexIngTransformed();
}



void UpperTriangleVanillaSwaptionQuotes::initialize_gDelegate_IndexIngTransformed() // 1st row and column not used! as g!  // UTM: upperTriangleMatrix
{
	//! 1st column and 1st row initialized to absurd value
	for(size_t k=0; k<indexMapping_gDelegate_gTransformed_.size1(); ++k)
	{
		indexMapping_gDelegate_gTransformed_(0,k) = std::pair<LMM::Index,LMM::Index>(-1000, -1000);
		indexMapping_gDelegate_gTransformed_(k,0) = std::pair<LMM::Index,LMM::Index>(-1000, -1000);
	}
	//! upperTriangle:
	for(size_t iDelegated = 1; iDelegated<indexMapping_gDelegate_gTransformed_.size1(); ++iDelegated) // row
	{
		for(size_t jDelegated = 1; jDelegated<indexMapping_gDelegate_gTransformed_.size2()-iDelegated; ++jDelegated) // col
		{
			// ok for any indexRatio_ value
			size_t jCol_gMatrix = jDelegated*indexRatio_;
			size_t iRow_gMatrix = iDelegated*indexRatio_;		
			indexMapping_gDelegate_gTransformed_(iDelegated,jDelegated) = std::pair<LMM::Index,LMM::Index>( iRow_gMatrix, jCol_gMatrix); 
		}
	}
}

size_t UpperTriangleVanillaSwaptionQuotes::computeStartIndex(size_t iMatrix)const 
{
	return iMatrix*indexRatio_;
}

size_t UpperTriangleVanillaSwaptionQuotes::computeIndexEnd(size_t iMatrix, size_t jMatrix)const 
{
	return ( computeStartIndex(iMatrix) + jMatrix*indexRatio_ );
}




void UpperTriangleVanillaSwaptionQuotes::write_to_stream(std::ostream& outputstream) const 
{
	{
		outputstream<<"Quotes, " <<std::endl;
		printFirstLabelLine(outputstream);
		for(size_t iMaturity=1;iMaturity<lastYear_;++iMaturity)
		{
			outputstream<<iMaturity<<"YR , ";
			printToStreamQuoteLine(outputstream,iMaturity);
		}
		outputstream<<lastYear_<<"YR , "<<std::endl<<std::endl;
	}

	{
		outputstream<<"strikes, " <<std::endl;
		printFirstLabelLine(outputstream);
		for(size_t iMaturity=1;iMaturity<lastYear_;++iMaturity)
		{
			outputstream<<iMaturity<<"YR , ";
			printToStreamSwaptionStrikeLine(outputstream,iMaturity);
		}
		outputstream<<lastYear_<<"YR , "<<std::endl<<std::endl;
	}

	{
		outputstream<<"g Ind Transf, " <<std::endl;
		printFirstLabelLine(outputstream);
		for(size_t iMaturity=1;iMaturity<lastYear_;++iMaturity)
		{
			outputstream<<iMaturity<<"YR , ";
			printToStream_gDelegate_IndiceLine(outputstream,iMaturity);
		}
		outputstream<<lastYear_<<"YR , "<<std::endl<<std::endl;
	}
	
	{
		outputstream<<"Swaptions indx, " <<std::endl;
		printFirstLabelLine(outputstream);
		for(size_t iMaturity=1;iMaturity<lastYear_;++iMaturity)
		{
			outputstream<<iMaturity<<"YR , ";
			printToStreamSwaptionIndicesLine(outputstream,iMaturity);
		}
		outputstream<<lastYear_<<"YR , "<<std::endl<<std::endl;
	}
}

void UpperTriangleVanillaSwaptionQuotes::printFirstLabelLine(std::ostream & stream) const 
{
	stream<<"Expri \\ Tenor, ";
	for(size_t iTenor=0; iTenor<lastYear_;++iTenor)
	{
		size_t tenor = iTenor+1;
		stream << tenor<<"YR, ";
	}
	stream<<std::endl;
}
void UpperTriangleVanillaSwaptionQuotes::printToStreamSwaptionIndicesLine(std::ostream & stream, const size_t row_number) const 
{
	for(size_t jCol = 1; jCol<upperTriangleVanillaSwaptionQuotes_.size2()-row_number ; ++jCol) 
	{
		const VanillaSwap& swap = upperTriangleVanillaSwaptionQuotes_(row_number,jCol).first.getUnderlyingSwap();
		size_t start_index_swaption = swap.get_indexStart();
		size_t end_index_swaption = swap.get_indexEnd();
		std::pair<size_t,size_t> swaption_indices(start_index_swaption,end_index_swaption);
		stream<< swaption_indices << ", ";				
	}
	stream<< std::endl;
}
void UpperTriangleVanillaSwaptionQuotes::printToStreamSwaptionStrikeLine(std::ostream & stream, const size_t row_number) const 
{
	for(size_t jCol = 1; jCol<upperTriangleVanillaSwaptionQuotes_.size2()-row_number ; ++jCol) 
	{
		stream<< upperTriangleVanillaSwaptionQuotes_(row_number,jCol).first.get_strike() << ", ";				
	}
	stream<< std::endl;
}
void UpperTriangleVanillaSwaptionQuotes::printToStreamQuoteLine(std::ostream & stream, const size_t row_number) const 
{
	for(size_t jCol = 1; jCol<upperTriangleVanillaSwaptionQuotes_.size2()-row_number ; ++jCol) 
	{
		stream<< upperTriangleVanillaSwaptionQuotes_(row_number,jCol).second<< ", ";				
	}
	stream<< std::endl;
}
void UpperTriangleVanillaSwaptionQuotes::printToStream_gDelegate_IndiceLine(std::ostream & stream, const size_t row_number) const 
{
	for(size_t jCol = 1; jCol<indexMapping_gDelegate_gTransformed_.size2()-row_number ; ++jCol) 
	{
		stream<< indexMapping_gDelegate_gTransformed_(row_number,jCol)<< ", ";				
	}
	stream<< std::endl;
}


void UpperTriangleVanillaSwaptionQuotes::print(const std::string& filename) const
{
	std::string path_OutPut = LMM::get_output_path() + filename;

	std::ofstream outputstream;
	outputstream.open(path_OutPut.c_str());
	this->write_to_stream(outputstream);
	outputstream<<std::endl;
	outputstream.close();
}


std::ostream& operator<<(std::ostream& os, const UpperTriangleVanillaSwaptionQuotes_ConstPTR& swaption_quotes)
{
	swaption_quotes->write_to_stream(os);
	return os;
}