#include <LMM/calibration/SwaptionMarketDataContainer.h>

#include <iostream>
#include <sstream>
#include <fstream>
#include <cstdlib>
#include <cmath>
#include <cassert>
#include <algorithm>

#include <LMM/helper/GenericPath.h>
#include <LMM/helper/BuildVariable.h>
#include <LMM/helper/Noise.h>
#include <LMM/numeric/Interpolation.h>

#include <LMM/pricer/LmmVanillaSwapPricer.h> // pre computing annuities and omega0

size_t SwaptionMarketDataContainer::get_nbSWAPTION()         const { return SWAPTION_VECTOR_.size()  ; }
size_t SwaptionMarketDataContainer::get_nbLIBOR()            const { return LIBOR_STARTDATES_.size() ; }
size_t SwaptionMarketDataContainer::get_SwaptionSparseStep() const { return swaption_sparse_step_;     } 

double & SwaptionMarketDataContainer::swaprate    ( size_t i ) { return SWAPRATE_VECTOR_[i]          ; }
double & SwaptionMarketDataContainer::strike      ( size_t i ) { return SWAPTION_VECTOR_[i].get_strikeRef() ; }
//double & SwaptionMarketDataContainer::libor_shift ( size_t k ) { return LIBOR_SHIFT_[k]              ; }

const std::vector<double>&               SwaptionMarketDataContainer::get_LIBOR_INIT()        const { return LIBOR_INIT_        ; }
//const std::vector<double>&               SwaptionMarketDataContainer::get_LIBOR_SHIFT()       const { return LIBOR_SHIFT_       ; }
const std::vector<double>&               SwaptionMarketDataContainer::get_ZC_BOND()           const { return ZC_BOND_           ; }
const std::vector<double>&               SwaptionMarketDataContainer::get_ZC_MATURITIES()     const { return ZC_MATURITIES_     ; }
const std::vector<double>&               SwaptionMarketDataContainer::get_LIBOR_STARTDATES()  const { return LIBOR_STARTDATES_  ; }
const SwaptionMarketDataContainer::RealVector&     SwaptionMarketDataContainer::get_NUMERAIRE()         const { return NUMERAIRE_  ;        }

const SwaptionMarketDataContainer::RealVector&     SwaptionMarketDataContainer::get_SWAPRATE_VECTOR()   const { return SWAPRATE_VECTOR_   ; }
const SwaptionMarketDataContainer::RealVector&     SwaptionMarketDataContainer::get_VOLATILITY_VECTOR() const { return VOLATILITY_VECTOR_ ; }
const SwaptionMarketDataContainer::SwaptionVector& SwaptionMarketDataContainer::get_SWAPTION_VECTOR()   const { return SWAPTION_VECTOR_   ; }
const std::vector<size_t>&                       SwaptionMarketDataContainer::get_SWPN_MATURITY_INDICES() const { return SWPN_MATURITY_INDICES_ ; }
const SwaptionMarketDataContainer::MatrixOfMatrixIndices& SwaptionMarketDataContainer::get_HGVOL_MATRIX_INDICES()   const { return HGVOL_MATRIX_INDICES_ ; }
const SwaptionMarketDataContainer::VectorOfMatrixIndices& SwaptionMarketDataContainer::get_HGVOL_VECTOR_INDICES()   const { return HGVOL_VECTOR_INDICES_ ; }
const SwaptionMarketDataContainer::SwaptionMatrix& SwaptionMarketDataContainer::get_SWPN_MATRIX()           const { return SWPN_MATRIX_; }
const SwaptionMarketDataContainer::RealMatrix    &        SwaptionMarketDataContainer::get_MKT_VOL_MATRIX()        const { return MKT_VOL_MATRIX_; }


void SwaptionMarketDataContainer::clear_all_data()
{
	clear_all_LIBOR_ZC()	  ;

	clear_all_SWAPTION_DATA() ;
}

void SwaptionMarketDataContainer::clear_all_LIBOR_ZC()
{
	LIBOR_INIT_.clear()       ;
	ZC_BOND_.clear()          ;
	ZC_MATURITIES_.clear()    ;
	LIBOR_STARTDATES_.clear() ;

	NUMERAIRE_.clear() ;
}
void SwaptionMarketDataContainer::clear_all_SWAPTION_DATA()
{
	SWAPRATE_VECTOR_.clear()       ;
	VOLATILITY_VECTOR_.clear()     ;		
	SWAPTION_VECTOR_.clear()       ;
	HGVOL_VECTOR_INDICES_.clear()  ;
	SWPN_MATURITY_INDICES_.clear() ;

	for(size_t iRow=0;iRow<HGVOL_MATRIX_INDICES_.size();++iRow)
	{
		HGVOL_MATRIX_INDICES_[iRow].clear();
	}
	HGVOL_MATRIX_INDICES_.clear();

	for(size_t iRow=0;iRow<SWPN_MATRIX_.size();++iRow)
	{
		SWPN_MATRIX_[iRow].clear();
	}
	SWPN_MATRIX_.clear();

	for(size_t iRow=0;iRow<MKT_VOL_MATRIX_.size();++iRow)
	{
		MKT_VOL_MATRIX_[iRow].clear();
	}
	MKT_VOL_MATRIX_.clear();
}


bool SwaptionMarketDataContainer::check_data_consistance() const 
{
	bool data_is_consistant = true;

	// check if data vector a coherent in terms of size
	//if (LIBOR_INIT_.size() !=  LIBOR_SHIFT_.size()      ) data_is_consistant = false;
	if (LIBOR_INIT_.size() !=  LIBOR_STARTDATES_.size() ) return false;
	if (ZC_BOND_.size()    !=  ZC_MATURITIES_.size()    ) return false;
	if (ZC_BOND_.size()    !=  NUMERAIRE_.size()        ) return false;

	if(    SWAPRATE_VECTOR_.size()   != VOLATILITY_VECTOR_.size() 
		|| SWAPRATE_VECTOR_.size()   != SWAPTION_VECTOR_.size() 
		|| VOLATILITY_VECTOR_.size() != SWAPTION_VECTOR_.size()  
		) return false;


	// check that all libor and ZC maturities after parsed are coherent with in LMMTenorStructure dates
	// exist in LMMTenorStructure dates 

	//for(const auto & libordate : LIBOR_STARTDATES_)
	//{ 
	//	if( !pLMMTenorStructure_->is_TenorDate(libordate) )
	//	{
	//		data_is_consistant=false;
	//		std::cout<<LMM::ERROR_MSG << "SwaptionMarketDataContainer::check_data_consistance() Libor date "<<libordate<< "not found in LMMTenorStructure" <<std::endl;  
	//	}
	//}

	//for(const auto & zcdate : ZC_MATURITIES_)
	//{ 
	//	if( !pLMMTenorStructure_->is_TenorDate(zcdate) )
	//	{
	//		data_is_consistant=false;
	//		std::cout<<LMM::ERROR_MSG << "SwaptionMarketDataContainer::check_data_consistance() ZC date "<<zcdate<< "not found in LMMTenorStructure" <<std::endl;  
	//	}
	//}

	// check if LMMTenorStructure do not have more date than interpolated LIBOR and ZC maturities

	//if (   LIBOR_STARTDATES_.size() != pLMMTenorStructure_->get_nbLIBOR()                                         // N+1          
	//	|| LIBOR_STARTDATES_.back() != pLMMTenorStructure_->get_tenorDate( pLMMTenorStructure_->get_horizon() )   // T[N]   
	//	)
	//{
	//	data_is_consistant=false;
	//	std::cout<<LMM::ERROR_MSG << "SwaptionMarketDataContainer::check_data_consistance() LIBOR_INIT dates incoherent with LMMTenorStructure dates" <<std::endl;  
	//}

	//if (  ZC_MATURITIES_.size() != pLMMTenorStructure_->get_nbLIBOR()+1
	//	||ZC_MATURITIES_.back() != pLMMTenorStructure_->get_tenorDate().back()  
	//	)
	//{
	//	data_is_consistant=false;
	//	std::cout<<LMM::ERROR_MSG << "SwaptionMarketDataContainer::check_data_consistance() ZC dates incoherent with LMMTenorStructure dates" <<std::endl;  
	//}

	// check for anuities size
	size_t nbLmmLibor = ZC_BOND_.size() - 1; // because ZC has first element which is 1
	size_t nbSwaption = SWAPTION_VECTOR_.size();

	return data_is_consistant;
}

void SwaptionMarketDataContainer::print(const std::string& filename) const
{
	std::string path_FileOut = LMM::get_output_path() + filename;

	std::ofstream outputFile  ;  outputFile.open(path_FileOut.c_str() );

	{// printout libors init
		std::stringstream libors_dates  ; 
		std::stringstream libors_values ; 
		outputFile << "LIBORS Init, " << std::endl;
		assert(LIBOR_STARTDATES_.size() == LIBOR_INIT_.size() ) ;
		printToStreamLiborDate(libors_dates);
		printToStreamLiborValue(libors_values);
		libors_dates  <<std::endl; 
		libors_values <<std::endl<<std::endl; 
		outputFile << libors_dates.str(); outputFile << libors_values.str();
	}

	{// printout zero coupon
		std::stringstream zc_dates  ; 
		std::stringstream zc_values ; 
		outputFile << "ZERO COUPON , " << std::endl;
		assert(ZC_MATURITIES_.size() == ZC_BOND_.size() ) ;
		printToStreamZCDate(zc_dates)   ;
		printToStreamZCValue(zc_values) ;
		zc_dates  <<std::endl; 	zc_values <<std::endl; 
		outputFile << zc_dates.str(); outputFile << zc_values.str();	
	}

	{// printout numeraire
		outputFile << "NUMERAIRE ," << std::endl;
		for (auto & num_bb : NUMERAIRE_) outputFile <<num_bb << ",	";
		outputFile << std::endl;
	}

	{// Implied Vol Matrix
		outputFile << std::endl<< std::endl<<"BLACK VOLs, "<<std::endl;
		std::stringstream black_vol_matrix  ; 
		printToStreamMarketVolMatrix(black_vol_matrix);

		outputFile<<black_vol_matrix.str();
		outputFile<<std::endl<<std::endl;
	}

	{// Strike Matrix
		
	}
	//outputFile <<  "=======    ATM SWAPTION VOL VECTOR   ========" << std::endl;
	//for (auto & vol_m : VOLATILITY_VECTOR_)  outputFile <<" "<<vol_m << ";";
	//outputFile << std::endl << std::endl;

	//outputFile << "=======    SWAP RATES   =========" << std::endl;
	//for (auto & strike_m : SWAPRATE_VECTOR_)  outputFile <<" "<<strike_m << ";";	
	//outputFile << std::endl << std::endl;

	////ctntodo print swaption matrix
	//outputFile << "=======    UNDERLYING SWAPTION VECTOR   =========" << std::endl;
	//for (auto & swaption_m : SWAPTION_VECTOR_)  outputFile << swaption_m.getUnderlyingSwap() << std::endl;	

	outputFile << std::endl;

	outputFile.close();	
}

void SwaptionMarketDataContainer::printToStreamMarketVolLine(std::stringstream & stream, const size_t iRowSwaption) const
{
	const RealVector & mkt_vol_line = MKT_VOL_MATRIX_[iRowSwaption];

	size_t iLibor = (iRowSwaption+1) * get_SwaptionSparseStep();
	stream<<LIBOR_STARTDATES_[iLibor]<<", ";
	
	for(size_t iSwaption=0;iSwaption<mkt_vol_line.size();++iSwaption)	
	{
		for(size_t i_unavalable=1;i_unavalable<get_SwaptionSparseStep();++i_unavalable){ stream<<", "; }
		stream<<mkt_vol_line[iSwaption]<<", ";
	}
}

void SwaptionMarketDataContainer::printToStreamMarketVolMatrix(std::stringstream & stream) const
{
	printToStreamZCDate(stream); stream<<std::endl;
	
	size_t nbSwaptionRow = MKT_VOL_MATRIX_.size();

	for(size_t iSwaptionRow=0;iSwaptionRow<nbSwaptionRow;++iSwaptionRow)
	{
		for(size_t i_unavalable=1;i_unavalable<get_SwaptionSparseStep();++i_unavalable){ stream<<std::endl; }
		printToStreamMarketVolLine(stream,iSwaptionRow) ;stream<<std::endl;		
	}
}

void SwaptionMarketDataContainer::printToStreamLiborDate(std::stringstream & stream) const
{
	for (size_t iLibor=0;iLibor< LIBOR_STARTDATES_.size();++iLibor)
	{
		stream  <<LIBOR_STARTDATES_[iLibor] << ", ";
	}
}
void SwaptionMarketDataContainer::printToStreamLiborValue(std::stringstream & stream) const
{
	for (size_t iLibor=0;iLibor< LIBOR_INIT_.size();++iLibor)
	{
		stream <<LIBOR_INIT_[iLibor]       << ", ";
	}
}
void SwaptionMarketDataContainer::printToStreamZCDate(std::stringstream & stream) const
{
	for (size_t iZC=0;iZC< ZC_MATURITIES_.size();++iZC)
	{
		stream  <<ZC_MATURITIES_[iZC] << ", ";
	}
}
void SwaptionMarketDataContainer::printToStreamZCValue(std::stringstream & stream) const
{
	for (size_t iZC=0;iZC< ZC_BOND_.size();++iZC)
	{
		stream  <<ZC_BOND_[iZC] << ", ";
	}
}