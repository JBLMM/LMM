#include <LMM/Test/Tests.h>

#include <LMM/helper/LMMTenorStructure.h>
#include <LMM/instrument/VanillaSwap.h>
#include <LMM/instrument/VanillaSwaption.h>

#include <LMM/LmmModel/UpperTriangleVanillaSwaptionQuotes.h>

void test_ResetSwap();

void test_GenerateLiborQuote();

UpperTriangleDoubleMatrix create_UpperTriangleDoubleMatrix(const size_t nbYear, const double& increment);

void test_UpperTriangleVanillaSwaptionQuotes()
{
	test_ResetSwap();

	test_GenerateLiborQuote();

	size_t nbYear = 5;
	Tenor tenorfixedleg = Tenor::_1YR;
	Tenor tenorfloatleg = Tenor::_6M;

	LMMTenorStructure_PTR pLmmTenorStructure( new LMMTenorStructure(tenorfloatleg, nbYear) );

	UpperTriangleDoubleMatrix strike_matrix  = create_UpperTriangleDoubleMatrix(nbYear,0.001);
	UpperTriangleDoubleMatrix atm_vol_matrix = create_UpperTriangleDoubleMatrix(nbYear,0.01);

	UpperTriangleVanillaSwaptionQuotes_ConstPTR  swaption_quote_ptr (new UpperTriangleVanillaSwaptionQuotes(pLmmTenorStructure,nbYear,tenorfixedleg,tenorfloatleg,strike_matrix,atm_vol_matrix) ); 

	std::cout<<swaption_quote_ptr<<std::endl;

	swaption_quote_ptr->print("test_UpperTriangleVanillaSwaptionQuotes.csv");
}

void test_ResetSwap()
{
	size_t nbYear = 5;
	Tenor tenorfixedleg = Tenor::_1YR;
	Tenor tenorfloatleg = Tenor::_6M;
	LMMTenorStructure_PTR pLmmTenorStructure( new LMMTenorStructure(tenorfloatleg, nbYear) );
	
	VanillaSwap empty_swap;
	VanillaSwaption empty_swaption;

	std::cout<<" ====  Default constructor of Swap "<<std::endl;
	std::cout<<empty_swap<<std::endl;

	{
		VanillaSwap swap(0.01,2,6,tenorfloatleg,tenorfixedleg, pLmmTenorStructure);

		empty_swap = swap;

		VanillaSwaption swaption(swap , OptionType::CALL);

		empty_swaption =  swaption;
	}

	std::cout<<" ====  After Assignment of Swap "<<std::endl;
	std::cout<<empty_swap<<std::endl;
}

void test_GenerateLiborQuote()
{
	size_t nbYear = 5;
	Tenor tenorfloatleg = Tenor::_6M;
	const double constant_rate = 0.02;

	LMMTenorStructure_PTR pLmmTenorStructure( new LMMTenorStructure(tenorfloatleg, nbYear) );

	LiborQuotes libor(pLmmTenorStructure,constant_rate);
	
}

UpperTriangleDoubleMatrix create_UpperTriangleDoubleMatrix(const size_t nbYear, const double& increment)
{
	size_t matrix_size = nbYear + 1;
	UpperTriangleDoubleMatrix upper_triangle_matrix(matrix_size,matrix_size);

	for(size_t k=0;k<matrix_size;++k)
	{ 
		upper_triangle_matrix(0,k) = - 10000000; //first row is not used
		upper_triangle_matrix(k,0) = - 10000000; //first row is not used
	}

	double counter = increment;
	for(size_t i=1;i<matrix_size;++i)
	{
		for(size_t j=1;j<matrix_size-i;++j)
		{
			upper_triangle_matrix(i,j) = counter;		
			counter+=increment;
		}
	}

	return upper_triangle_matrix;
}