#include <LMM/Test/Tests.h>
#include <LMM/Test/Test_CalibrationConfig.h>

#include <iostream>
#include <cassert>
#include <string.h>
#include <cmath>
#include <fstream>

#include <boost/random/mersenne_twister.hpp>
#include <boost/random/uniform_real_distribution.hpp>
#include <ctime>
#include <cmath>

// ---- include for QuantLib calibration -------
#include <ql/math/optimization/endcriteria.hpp>
#include <ql/math/optimization/constraint.hpp>
#include <ql/math/optimization/problem.hpp>
#include <ql/math/optimization/simplex.hpp>
#include <ql/math/optimization/bfgs.hpp> 
#include <ql/math/optimization/conjugategradient.hpp>
#include <ql/math/optimization/levenbergmarquardt.hpp>
// ---- include for QuantLib calibration -------

#include <LMM/helper/GenericPath.h>
#include <LMM/helper/TenorType.h>
#include <LMM/helper/LMMTenorStructure.h>
#include <LMM/numeric/NumericalMethods.h>
#include <LMM/RNGenerator/McGenerator.h>
#include <LMM/helper/Noise.h>

#include <LMM/calibration/ATMSwaptionMarketData.h>
#include <LMM/calibration/SwaptionMarketDataContainer.h>
#include <LMM/calibration/SwaptionMarketDataManager.h>

#include <LMM/LmmModel/Lmm.h>
#include <LMM/LmmModel/Correlation.h>
#include <LMM/LmmModel/ConstShifted_HGVolatilityFunction.h>
#include <LMM/pricer/LmmVanillaSwaptionApproxPricer_Rebonato.h>

#include <LMM/calibration/CalibrationVolCostFunction.h>

void test_LmmCalibrationGlobal(const Test_CalibrationConfig& config);
void test_LmmCalibrationLocal(const Test_CalibrationConfig& config);

void test_LmmCalibration()
{
	std::cout<<"test_LmmCalibration() called"<<std::endl;

	Test_CalibrationConfig config;

	//config.re_init_randomly();
	test_LmmCalibrationGlobal(config);

}

void test_LmmCalibrationGlobal(const Test_CalibrationConfig& config)
{
	config.is_local_test = false;

	config.print(config.basefilename_global_calibration);

	std::ostringstream file_init_vol; file_init_vol<<config.basefilename_global_calibration<< "_full_init_vol.csv";
	config.pConstShifted_HGVolatilityParam->print( file_init_vol.str() );

	const QuantLib::Array g_Delegate_Init = config.pGMatrixMapping->get_DelegateArray();
	
	const QuantLib::Array g_Delegate_Perturbed = config.get_Perturbed_gDelegateArray(g_Delegate_Init);

	config.pGMatrixMapping->reset_gDelegate(g_Delegate_Perturbed);
	config.update_gDelegateChange();
	
	std::ostringstream file_perturbed_vol; file_perturbed_vol<<config.basefilename_global_calibration<< "_full_perturbed_vol.csv";
	config.pConstShifted_HGVolatilityParam->print( file_perturbed_vol.str() );
}

void test_LmmCalibrationLocal(const Test_CalibrationConfig& config)
{
	config.is_local_test = true;

}