#include <iostream>
#include <cassert>

#include <ql/math/matrix.hpp>

#include <LMM/Test/Tests.h>
#include <LMM/numeric/Interpolation.h>


using namespace numeric;


void test_LinearInterpolation();
void test_LinearInterpolation_approx();
void test_matrixInterpolation();

void test_Interpolation()
{

	test_LinearInterpolation();
	
	test_LinearInterpolation_approx();

	test_matrixInterpolation();
}

void test_matrixInterpolation()
{
	QuantLib::Matrix matrix(3,3,0.);

	matrix[0][0]=1.;matrix[0][2]=2.;
	matrix[2][0]=3.;matrix[2][2]=4.;

	numeric::Interpolation interpolator;
	
	std::cout<<"Matrix before interpolated : "<<std::endl<<matrix<<std::endl;

	// interpolate rows
	matrix[0][1]=interpolator.columnIntepolation(matrix[0][0],matrix[0][2],0,2,1);
	matrix[2][1]=interpolator.columnIntepolation(matrix[2][0],matrix[2][2],0,2,1);

	// interpolate column
	matrix[1][0]=interpolator.columnIntepolation(matrix[0][0],matrix[2][0],0,2,1);
	matrix[1][2]=interpolator.columnIntepolation(matrix[0][2],matrix[2][2],0,2,1);
	
	std::cout<<"Matrix before center interpolation : "<<std::endl<<matrix<<std::endl;

	// interpolate center
	matrix[1][1] = interpolator.matrixIntepolation(matrix[0][0],matrix[0][2],matrix[2][0],matrix[2][2], 0,0,2,2,1,1);

	std::cout<<"Matrix after after interpolated : "<<std::endl<<matrix<<std::endl<<std::endl;
}


void test_LinearInterpolation()
{
	std::vector<double> someVector(3);
	someVector[0] = 0.01;  
	someVector[1] = 0.02; 
	someVector[2] = 0.03;

	std::vector<double> falseTenorDates(3);
	falseTenorDates[0] = 0.;
	falseTenorDates[1] = 0.5;
	falseTenorDates[2] = 1.;

	double maturity_date = 0.75; 
	
	double coeff_1 = (falseTenorDates[2]-maturity_date)/(falseTenorDates[2]-falseTenorDates[1]);
	double coeff_2 = (maturity_date-falseTenorDates[1])/(falseTenorDates[2]-falseTenorDates[1]);
	double expectedResult = coeff_1*someVector[1] + coeff_2*someVector[2];

	numeric::Interpolation interpolator;
	interpolator.linearInterpolation(someVector,falseTenorDates,maturity_date);
	
	assert(someVector.size()      == 4 );
	assert(falseTenorDates.size() == 4 );

	assert(falseTenorDates[2] = maturity_date  );//additioinal point
	assert(someVector[2]      = expectedResult );

	std::cout<<"someVector : ";
	for (auto inter_val : someVector) std::cout << inter_val << " "; std::cout<<std::endl;

	std::cout<<"falseTenorDates : ";
	for (auto inter_val : falseTenorDates) std::cout << inter_val << " ";  std::cout<<std::endl ;

	std::cout << std::endl;
	std::cout << "Expected result : " << expectedResult << std::endl;
}

void test_LinearInterpolation_approx()
{
	std::vector<double> someVector(3);
	someVector[0] = 0.01;  
	someVector[1] = 0.02; 
	someVector[2] = 0.03;

	std::vector<double> falseTenorDates(3);
	falseTenorDates[0] = 0.  ;
	falseTenorDates[1] = 0.5 ;
	falseTenorDates[2] = 1.  ;

	double maturity_date = 0.50000001; // very closed date to an existing date --> no need to interpolate
	
	numeric::Interpolation interpolator;
	interpolator.linearInterpolation(someVector,falseTenorDates,maturity_date,0.000001);
	
	assert(someVector.size()      == 3 );
	assert(falseTenorDates.size() == 3 );

	std::cout<<"someVector : ";
	for (auto inter_val : someVector) std::cout << inter_val << " "; std::cout<<std::endl;

	std::cout<<"falseTenorDates : ";
	for (auto inter_val : falseTenorDates) std::cout << inter_val << " ";  std::cout<<std::endl ;

}