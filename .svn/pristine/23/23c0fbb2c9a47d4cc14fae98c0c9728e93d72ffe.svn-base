#pragma once
#include <boost/shared_ptr.hpp>

#include <LMM/LmmModel/McLmm.h>        // Model
#include <LMM/instrument/BermudanSwaption.h>  // Instrument
#include <LMM/pricer/McLmmVanillaSwapPricer.h>
#include <LMM/pricer/McLmmCallableOptionPricer.h>
#include <vector>
#include <LMM/pricer/Regression.h>

class McLmmBermudanSwaptionPricer : public McLmmCallableOptionPricer // to reuse the already implemented code in VanillaSwapPricer.
{
	BermudanSwaption_PTR bermudanSwaption_ptr_;
	size_t basisMonomialMaxOrder_;    // basis
	size_t basisCorssnomialMaxOrder_; // basis

	std::vector<std::vector<EV_PTR>> evsAtCallableDates_;    // ith element correspond to callableDatesIndex[i]
	std::vector<RegressionBasis_PTR> basisAtCallableDates_;  // ith element correspond to callableDatesIndex[i]


	std::vector<std::vector<double>> X_; //  seems better to use matrix  ???? 
	std::vector<std::vector<double>> Y_; //  seems better to use matrix  ???? 

public:
	McLmmBermudanSwaptionPricer(McLmm_PTR mcLmm_ptr,
								size_t nb_1stFwdSimulation,
								size_t nb_2ndFwdSimulation,
								size_t basisMonomialMaxOrder,    // basis param
								size_t basisCorssnomialMaxOrder) // basis param
		: McLmmCallableOptionPricer(mcLmm_ptr, nb_1stFwdSimulation, nb_2ndFwdSimulation)
		, basisMonomialMaxOrder_(basisMonomialMaxOrder)
	    , basisCorssnomialMaxOrder_(basisCorssnomialMaxOrder)
	{
		assert(basisCorssnomialMaxOrder_ == 2); //YY for the moment: only work for this case
	}

	virtual ~McLmmBermudanSwaptionPricer(){};

	virtual void preparePricerForInstrument(CallableOption_PTR callableOption_ptr); 
	void initialize_EV();
	void initialize_Basis();

	virtual void bwdRegression();      
	virtual double continuousValue(LMM::Index callableTimeIndex);
	virtual double intrinsicValue(LMM::Index callableTimeIndex);
};

typedef boost::shared_ptr<McLmmBermudanSwaptionPricer> McLmmBermudanSwaptionPricer_PTR;