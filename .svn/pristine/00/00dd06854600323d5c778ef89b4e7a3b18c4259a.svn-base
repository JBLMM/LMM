#include <LMM/Test/Tests.h>

#include <iostream>
#include <cassert>
#include <string.h>
#include <cmath>
#include <fstream>

#include <boost/random/mersenne_twister.hpp>
#include <boost/random/uniform_real_distribution.hpp>
#include <ctime>
#include <cmath>

// ---- include for QuantLib calibration -------
#include <ql/math/optimization/endcriteria.hpp>
#include <ql/math/optimization/constraint.hpp>
#include <ql/math/optimization/problem.hpp>
#include <ql/math/optimization/simplex.hpp>
#include <ql/math/optimization/bfgs.hpp> 
#include <ql/math/optimization/conjugategradient.hpp>
#include <ql/math/optimization/levenbergmarquardt.hpp>
// ---- include for QuantLib calibration -------

#include <LMM/helper/GenericPath.h>
#include <LMM/helper/TenorType.h>
#include <LMM/helper/LMMTenorStructure.h>
#include <LMM/numeric/NumericalMethods.h>
#include <LMM/RNGenerator/McGenerator.h>
#include <LMM/helper/Noise.h>

#include <LMM/calibration/ATMSwaptionMarketData.h>
#include <LMM/calibration/ATMSwaptionStructuredData.h>

#include <LMM/LmmModel/Lmm.h>
#include <LMM/LmmModel/Correlation.h>
#include <LMM/LmmModel/ConstShifted_HGVolatilityFunction.h>
#include <LMM/pricer/LmmVanillaSwaptionApproxPricer_Rebonato.h>

#include <LMM/calibration/CalibrationVolCostFunction.h>
#include <LMM/calibration/TestHGVolatilityParam.h>

double compute_penalty_coeff(size_t iter, size_t max_iter)
{
	if( iter==0) return 0.;

	size_t switch_point = max_iter/2;

	double x = (double) iter - (double) switch_point;
	double penalty ;

	//if (x < 0. ) 
	//	penalty = 0.5 * exp( x );
	//else
	//	penalty = 1 - 0.5 * exp( -x );
	if (x < 0. ) penalty = exp( x ) ;
	else         penalty = 1.;

	return penalty;
}

ATMSwaptionStructuredData::VectorOfMatrixIndices createSparseIndice(size_t nbYear, size_t sparse_step);

void setDiagonallyVolParam(QuantLib::Array & fullparam,  const double maxvol=1, const double increment=0.1, const double diag_noise = 0); 

void testcase_SparseVolatilityCalibrator(const std::string& base_file_name, size_t nbYear,const double perturbe_noise, const double g_diag_noise, bool debugconsol,size_t nb_regularization_loop);

void test_GlobalSparseCalibrationWithSwaptionVol()
{
	std::string basefilename = "test_GlobalSparseCalibrationWithSwaptionVol_";

	size_t nbYear = 10;
	double perturbe_noise = 0.5;
	double g_diag_noise   = 0.1;
	size_t nb_regularization_loop = 10; // set to 1 if don't wish the penalty on diagonal

	//for(size_t nbYear = 4;nbYear<15;++nbYear)
	//{
	//	testcase_SparseVolatilityCalibrator(basefilename, nbYear,perturbe_noise,use_regularization,g_diag_noise, false);
	//}

	testcase_SparseVolatilityCalibrator(basefilename,nbYear,perturbe_noise,g_diag_noise, false, nb_regularization_loop);
}



void testcase_SparseVolatilityCalibrator(const std::string& base_file_name, size_t nbYear,const double perturbe_noise, const double g_diag_noise, bool debugconsol, size_t nb_regularization_loop)
{

	Tenor tenorfixedleg = Tenor::_1YR;
	Tenor tenorfloatleg = Tenor::_6M;

	LMMTenorStructure_PTR pLmmTenorStructure( new LMMTenorStructure(tenorfloatleg, nbYear) );
	size_t nbLIBOR = pLmmTenorStructure->get_nbLIBOR();

	size_t sparse_step = tenorfixedleg.ratioTo(tenorfloatleg);
	size_t nbSparseParam = (nbYear-1)*nbYear/2 ;// = nbSwaption

	ATMSwaptionStructuredData::VectorOfMatrixIndices all_sparse_indices = createSparseIndice(nbYear,sparse_step);


	// =================   CREATION OF LMM_PTR   =============================
	//init abcd default a=-0.06,  b=0.17, c=0.54, d=0.17
	double a = 0;
	double b = 0;
	double c = 0;
	double d = 0.02;

	double g_constParam = 1;
	double shift_constParam = 0.0;

	//double shiftValue = 0.0; // -0.01;
	//std::vector<double> shifts(pLmmTenorStructure->get_horizon()+1, shiftValue);

	ConstShifted_HGVolatilityParam_PTR pHGVolatilityParam(new TestHGVolatilityParam(pLmmTenorStructure, a,b,c,d,g_constParam, shift_constParam));

	const unsigned int nbFullParam = pHGVolatilityParam->get_nbCalibrateParam();

	QuantLib::Array init_sparse_param(all_sparse_indices.size() , 2.*nbYear , 0.); 
	size_t index_step = tenorfixedleg.ratioTo(tenorfloatleg);
	setDiagonallyVolParam(init_sparse_param , 2.*nbYear , 0.1*nbYear , g_diag_noise);
	std::cout<<"Vol before Initiating; "<<std::endl <<*pHGVolatilityParam<<std::endl;
	pHGVolatilityParam->reset_G_FromArray(init_sparse_param, all_sparse_indices , true); // reset with interpolated
	std::cout<<"Vol after Initiating; " <<std::endl<<*pHGVolatilityParam<<std::endl;
	std::ostringstream file_init_vol; file_init_vol<<base_file_name<<nbYear<< "YR_full_init_vol.csv";
	pHGVolatilityParam->print(file_init_vol.str());



	//! Correlation 
	size_t nbFactor       = 3; // need to test nbFactor  = 3, and nbFactor = 
	size_t correlFullRank = pLmmTenorStructure->get_horizon()+1;
	size_t correlReducedRank = nbFactor;
	CorrelationReductionType::CorrelationReductionType correlReductionType = CorrelationReductionType::PCA;
	double correlAlpha = 0.0;
	double correlBeta  = 0.1;
	//Correlation_PTR correlation(new Const_Correlation(correlFullRank,correlReducedRank, correlReductionType,0.)); //not work
	Correlation_PTR correlation(new XY_beta_Correlation(correlFullRank,correlReducedRank, correlReductionType,correlAlpha,correlBeta));
	correlation->calculate(); // for print.


	double fwdRate = 0.04;
	std::vector<double> liborsInitValue(pLmmTenorStructure->get_horizon()+1, fwdRate);

	Shifted_HGVolatilityFunction_PTR pVolatilityFunction (new ConstShifted_HGVolatilityFunction(pLmmTenorStructure, correlation, pHGVolatilityParam)); 

	//! Dispersion
	Dispersion dispersion(pVolatilityFunction);

	Lmm_PTR lmm_ptr(new Lmm(dispersion) );

	LmmVanillaSwaptionApproxPricer_Rebonato_PTR pLmmApproxVanillaSwaptionPricer(new LmmVanillaSwaptionApproxPricer_Rebonato(lmm_ptr));					 
	// =================  END  CREATION OF LMM_PTR   =============================




	ATMSwaptionStructuredData_PTR pATMSwaptionStructuredData(new ATMSwaptionStructuredData( pLmmTenorStructure ) ) ;
	pATMSwaptionStructuredData->generateMarketData(tenorfixedleg, tenorfloatleg, pLmmApproxVanillaSwaptionPricer.get(),0.02,0.005 );

	size_t nbSwaption = pATMSwaptionStructuredData->get_nbSWAPTION();
	assert(nbSparseParam==nbSwaption);
	const ATMSwaptionStructuredData::VectorOfMatrixIndices& indices_sparse_vol = pATMSwaptionStructuredData->get_HGVOL_VECTOR_INDICES() ;
	//preparing for deprecated constructor of 	CalibrationVolCostFunction
	std::vector<double> libor_shifts(pATMSwaptionStructuredData->get_nbLIBOR() );


	CalibrationVolCostFunction::vector_ swaptionweights(nbSwaption,1.);        
	CalibrationVolCostFunction::matrix_ weights_maturity(nbLIBOR-1 , std::vector<double>(nbLIBOR-1,1.) );
	CalibrationVolCostFunction::matrix_ weights_tenor(nbLIBOR-1 , std::vector<double>(nbLIBOR-1,1.) );
	CalibrationVolCostFunction::matrix_ weights_maturity_2(nbLIBOR-1 , std::vector<double>(nbLIBOR-1,1.) );
	CalibrationVolCostFunction::matrix_ weights_tenor_2(nbLIBOR-1 , std::vector<double>(nbLIBOR-1,1.) );

	//compute weight following swaption lenght
	const ATMSwaptionStructuredData::SwaptionVector &  marketSwaptions  = pATMSwaptionStructuredData->get_SWAPTION_VECTOR();
	//  The higher swaption maturity, we need to give the high weight, in order to renforce the influence of
	//  high index volatilities 
	double sum_maturity=0;
	for(size_t iSwaption=0;iSwaption<nbSwaption;++iSwaption)
	{
		const VanillaSwap & swap = marketSwaptions[iSwaption].getUnderlyingSwap();
		size_t swapLenght  = swap.get_indexEnd() - swap.get_indexStart() ;
		swaptionweights[iSwaption] = (double) swapLenght;
		sum_maturity  +=  swaptionweights[iSwaption] ;
	}
	for(size_t iSwaption=0;iSwaption<nbSwaption;++iSwaption)
	{
		swaptionweights[iSwaption] /= sum_maturity ;
	}

	CalibrationVolCostFunction myFunc
		(
		pHGVolatilityParam, 
		pATMSwaptionStructuredData,
		pLmmApproxVanillaSwaptionPricer,			
		//libor_shifts,
		swaptionweights,
		weights_maturity,
		weights_tenor,
		weights_maturity_2,
		weights_tenor_2	);
	myFunc.reset_HG_Indices( indices_sparse_vol );
	if(nb_regularization_loop>1) myFunc.use_penalty = true;
	

	// ---- settting for calibration -------
	QuantLib::Array init_full_param = pHGVolatilityParam->get_ArrayFrom_G( CalibrationVolCostFunction::VectorOfMatrixIndices() );

	std::vector<double> multiplicative_noise = Multiplicative::UniformNoise(nbSparseParam,perturbe_noise);
	//std::vector<double> multiplicative_noise = Multiplicative::BernouilliNoise(nbSparseParam,perturbe_noise);

	QuantLib::Array perturbed_sparse_param(init_sparse_param);
	for(size_t i=0;i<nbSparseParam;++i){ perturbed_sparse_param[i]*= multiplicative_noise[i]; }

	pHGVolatilityParam->reset_G_FromArray(perturbed_sparse_param, indices_sparse_vol , false); // reset without interpolated;
	QuantLib::Array perturbed_full_param = pHGVolatilityParam->get_ArrayFrom_G( CalibrationVolCostFunction::VectorOfMatrixIndices() );
	std::cout<<"Vol after perturbed ; " <<std::endl<<*pHGVolatilityParam<<std::endl;
	std::ostringstream file_perturbed_vol; file_perturbed_vol<<base_file_name<<nbYear<< "YR_full_perturbed_vol.csv";
	pHGVolatilityParam->print(file_perturbed_vol.str());

	std::cout<<"Test_RebonatoVolatilityCalibrator START CALIBRATION	"<<std::endl
		<<" nbSwaption:" <<nbSwaption<<"	nbFullParam:" <<nbFullParam <<"    nbLIBOR:"<<nbLIBOR <<std::endl;
	std::cout <<std::endl<< "id  , InitParam , PerturbedParam	       "<<std::endl;
	for(size_t i=0;i<nbFullParam;++i)
	{
		std::cout<<i<<"  ,        "<<init_full_param[i]<<"  ,  "<<perturbed_full_param[i]<<std::endl;
	}	

	if(debugconsol){
		std::cout<<"Press a key to process the calibration ..."<<std::endl<<std::endl;getchar();
	}


	//QuantLib::NoConstraint constraint ;
	QuantLib::PositiveConstraint constraint ;
	
	QuantLib::LevenbergMarquardt solver ;
	//QuantLib::BFGS              solver      ;
	//QuantLib::ConjugateGradient solver      ;
	//QuantLib::Simplex           solver(0.1) ;

	//double penalty_step = 10.;
	clock_t start_minimizer = std::clock();
	size_t global_NB_Iter=0;
	double penalty_coeff;
	for(size_t iter_penalty = 0;iter_penalty<nb_regularization_loop;++iter_penalty)
	{
		penalty_coeff = compute_penalty_coeff(iter_penalty,nb_regularization_loop) ;
		std::cout<<"============================ testcase_SparseVolatilityCalibrator penalty_coeff = "<< penalty_coeff <<std::endl;
		myFunc.reset_PenaltyCoeff(penalty_coeff);

		QuantLib::Array init_calib_sparse_param = pHGVolatilityParam->get_ArrayFrom_G( indices_sparse_vol );
		QuantLib::Problem myProb ( myFunc , constraint , init_calib_sparse_param );

		QuantLib::Size maxIterations       = 10000*nbYear ;
		QuantLib::Size minStatIterations   = 30  ;
		QuantLib::Real rootEpsilon         = 1e-9   ;//1e-9 ;
		QuantLib::Real functionEpsilon     = 1e-5   ;//1e-7 ;
		QuantLib::Real gradientNormEpsilon = 0.   ;//1e-7 ;
		QuantLib::EndCriteria myEndCrit ( maxIterations ,minStatIterations ,rootEpsilon ,functionEpsilon ,gradientNormEpsilon );

		QuantLib::EndCriteria::Type solvedCrit = solver.minimize(myProb,myEndCrit);

		global_NB_Iter+= myFunc.get_nbCalled(); myFunc.reset_nbCalled();

		if(debugconsol){
			std::cout<<std::endl<<"End of Penalty Iteration "<<iter_penalty<< "  with penalty coeff "<<penalty_coeff <<std::endl;
			std::cout<<"Press a key to process the calibration ..."<<std::endl<<std::endl;
			getchar();
		}	
	}

	clock_t end_minimizer = std::clock();
	double time_minimization = double(end_minimizer - start_minimizer) / CLOCKS_PER_SEC;

	QuantLib::Array calibrated_full_param = pHGVolatilityParam->get_ArrayFrom_G( CalibrationVolCostFunction::VectorOfMatrixIndices() );

	// ---- settting for calibration -------

	if(debugconsol){
		std::cout<<"Test_RebonatoVolatilityCalibrator : type a key for continue ..."<<std::endl;getchar();
	}

	std::ostringstream file_calibrated_vol; file_calibrated_vol<<base_file_name<<nbYear<< "YR_full_calibrated_vol.csv";
	pHGVolatilityParam->print(file_calibrated_vol.str());

	{
		std::ostringstream file_compar_mkt_approx;file_compar_mkt_approx << LMM::get_output_path() <<  base_file_name << nbYear <<"YR_Results.csv";
		std::ofstream result_stream;
		result_stream.open(file_compar_mkt_approx.str());

		result_stream<<std::endl<< " -------COMPARISON INIT VOLPARAM vs CALIBRATED VOLPARAMS--------,"<<std::endl
			<<std::endl<< "InitParam , PerturbedParam,	CalibratedParam, ,diffPerturb,  diffCalib,"<<std::endl;
		double l2_diff_calib=0,l2diff_perturb=0,linf_diff_calib=0,linf_diff_perturb=0;
		for(size_t i=0;i<nbFullParam;++i)
		{
			result_stream<<init_full_param[i]<<"              ,  "<<perturbed_full_param[i]<<"           ,  "<<calibrated_full_param[i]<<",,";
			double diffperturb = std::abs(perturbed_full_param[i] - init_full_param[i]);
			double diffcalib = std::abs( calibrated_full_param[i]- init_full_param[i]);
			result_stream<<diffperturb<<"," <<diffcalib<<",";
			if(diffperturb > diffcalib)
				result_stream<<"Ok,";
			else
				result_stream<<"Bad,";
			result_stream<<std::endl;

			l2_diff_calib+=diffcalib*diffcalib;
			l2diff_perturb+=diffperturb*diffperturb;
			if(linf_diff_calib<diffcalib) linf_diff_calib=diffcalib;
			if(linf_diff_perturb<diffperturb) linf_diff_perturb=diffperturb;
		}
		result_stream<<std::endl;
		result_stream<< ",,,L2, "<<l2diff_perturb<<","<<l2_diff_calib <<std::endl;
		result_stream<< ",,,L Inf, "<<linf_diff_perturb<<","<<linf_diff_calib <<std::endl;

		const ATMSwaptionStructuredData::RealVector &      marketInitLIBORs = pATMSwaptionStructuredData->get_LIBOR_INIT();
		const ATMSwaptionStructuredData::RealVector &      marketSwapRates  = pATMSwaptionStructuredData->get_SWAPRATE_VECTOR();

		const ATMSwaptionStructuredData::RealVector &      marketVols       = pATMSwaptionStructuredData->get_VOLATILITY_VECTOR();
		std::vector<VanillaSwap> marketSwaps;
		for (const auto& swaption : marketSwaptions)
		{
			marketSwaps.push_back( swaption.getUnderlyingSwap() );
		}


		///! compare the approximation Vanilla Swaption Rebonato's vol with the market's swaption vol
		LmmVanillaSwaptionApproxPricer_Rebonato_PTR swaptionApproxPricer_ptr = myFunc.get_LmmVanillaSwaptionApproxPricer();
		std::vector<double> approxSwaptionVols;
		for (const auto& swaption : marketSwaptions)
		{
			double approxVol = swaptionApproxPricer_ptr->volBlack(swaption,marketInitLIBORs);
			approxSwaptionVols.push_back( approxVol );
		}

		result_stream<<std::endl<< " -------COMPARISON MARKET's VOL vs APPROXIMATION CALIBRATED VOL --------,"<<std::endl;
		result_stream<< "Market ,"<<"	Approx,"<<std::endl;
		double L2_diff=0.;
		double Linf_diff=0.;
		for(size_t i=0;i<nbSwaption;++i)
		{
			result_stream<< marketVols[i]<<",	"<< approxSwaptionVols[i]<<","<<std::endl;
			L2_diff += std::abs(marketVols[i]*marketVols[i] - approxSwaptionVols[i]*approxSwaptionVols[i]);
			if(Linf_diff < std::abs(marketVols[i] - approxSwaptionVols[i]) )
				Linf_diff= std::abs(marketVols[i] - approxSwaptionVols[i]);
		}
		result_stream<< ",,L2 normalized diff Approx vs Market , "<<std::sqrt(L2_diff)/nbSwaption<<","<<std::endl;
		result_stream<< ",,LInf normalized diff Approx vs Market , "<<Linf_diff<<","<<std::endl;
		result_stream<< ",,Total time  , "<<time_minimization<<","<<std::endl;
		result_stream<< ",,nbCalled values, "<<global_NB_Iter<<std::endl;
		result_stream<< ",,Last Penalty Coeff, "<<penalty_coeff<<std::endl;
		
		result_stream<< "########,########,########,########,########,"<<std::endl<<std::endl<<std::endl;
		if(debugconsol){
			std::cout<<"		type a key to continue ..."<<std::endl;getchar();
		}

		result_stream.close();
	}


	///ctntodo
	std::vector<double> simulatedImpliedVols;
	/*! Compute simulation and implied volatilities
	* Giving the calibrated volatility, and market's swaptions configurations (payments, maturities, date and tenor ) 
	*	- use Monte-Carlo simulation to price the swaptions prices
	*  - use NumericalMethod for returning these implied volatilities from theses prices
	*  - compare with the market's volatilities
	*/

}


void setDiagonallyVolParam(QuantLib::Array & x , const double maxvol, const double increment, const double diag_noise)
{
	std::vector<std::vector<double> > fullvolmatrix;

	size_t x_size = x.size();
	size_t nb_alloc = 1;
	size_t current_index = 0;

	while (current_index < x_size)
	{
		std::vector<double> matrix_row;
		for (size_t i = 0; i < nb_alloc; ++i)
		{
			matrix_row.push_back(x[current_index]);
			current_index++;
		}
		fullvolmatrix.push_back( matrix_row );
		nb_alloc++;
	}

	for (size_t i = 0; i < fullvolmatrix.size(); ++i)
	{
		size_t current_index = fullvolmatrix[i].size();
		for (size_t j = current_index; j < fullvolmatrix.size(); ++j)
			fullvolmatrix[i].push_back(0.);
	}

	size_t volmatrixDim = fullvolmatrix.size();

	for(size_t subdiagonalitem=0 ; subdiagonalitem<volmatrixDim;++subdiagonalitem)
	{
		//diag_noise
		size_t nbElementOnSubSubDiagonal = volmatrixDim - subdiagonalitem ;		
		std::vector<double> diag_mult_noise = Multiplicative::UniformNoise(nbElementOnSubSubDiagonal,diag_noise);
		//std::vector<double> diag_mult_noise = Multiplicative::BernouilliNoise(nbElementOnSubSubDiagonal,diag_noise);

		for(size_t iCol=subdiagonalitem; iCol < volmatrixDim ; ++iCol)
		{
			size_t jCol = iCol - subdiagonalitem;

			fullvolmatrix[iCol][jCol] = (maxvol - increment*subdiagonalitem)* diag_mult_noise[jCol] ;
		}
	}

	size_t index_vector = 0;
	for(size_t i=0;i<volmatrixDim ; ++i)
	{
		for(size_t j=0;j<=i ; ++j)
		{
			x[index_vector] = fullvolmatrix[i][j];	
			++index_vector;
		}
	}
	assert(index_vector == x.size() );
}


ATMSwaptionStructuredData::VectorOfMatrixIndices createSparseIndice(size_t nbYear, size_t sparse_step)
{
	ATMSwaptionStructuredData::VectorOfMatrixIndices indices;
	size_t max_index = sparse_step*nbYear;

	for(size_t iYR=1;iYR<nbYear;++iYR)
	{
		for(size_t jYR=1;jYR<=iYR;++jYR)
		{
			size_t libor_index = iYR*sparse_step;
			size_t time_index = jYR*sparse_step;
			indices.push_back( std::pair<size_t,size_t>(libor_index,time_index) );
		}	
	}

	return indices;
}