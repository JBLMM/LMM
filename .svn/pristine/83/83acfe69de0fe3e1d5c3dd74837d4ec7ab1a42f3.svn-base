#include <cassert>

#include <LMM/helper/GenericPath.h>
#include <LMM/helper/Printer.h>
#include <LMM/LmmModel/Shifted_HGVolatilityFunction.h>
#include <cmath>

Shifted_HGVolatilityFunction::Shifted_HGVolatilityFunction(HGVolatilityParam_PTR pHGVolatilityParam,
														   LMMTenorStructure_PTR pLMMTenorStructure,
														   Correlation_PTR correlation,
														   std::vector<double> shifts)       // horizon = N, total number of libor: L_k, k = [0,N]
	: HGVolatilityFunction(pHGVolatilityParam, pLMMTenorStructure, correlation)
	, shifts_(shifts)
{

}


//
//double HGVolatilityFunction::operator()(size_t indexLibor, size_t indexTime) const// operator(i,j) --return vol--> hij, i>=j
//{
//	//if(ifVolisUpToDate_ = false)  // YY: This is needed for calibration! 
//	//	throw("Error Vol need to update before the calculation.");
//
//	if(indexLibor<indexTime)
//		throw("Error, index relation error!");
//
//	if(indexLibor<1 || indexLibor>hPWConstFunc_.size1())  // size1 = horizon
//		throw("Error, invalid indexLibor!");
//
//	if(indexTime <1)  // size1 = horizon
//		throw("Error, invalid indexTime!");
//
//	return hPWConstFunc_(indexLibor, indexTime)*gPWConstFunc_(indexLibor, indexTime);
//}

//! \int_{T_i}^{T_j} varSigma_i(u)*varSigma_j(u)*rho_ij(u) du
double Shifted_HGVolatilityFunction::covIntegral(size_t indexTime_i,
										 size_t indexTime_j,
										 size_t indexLibor_i,
										 size_t indexLibor_j) const
{
	assert(indexLibor_i <= indexLibor_j);

	size_t indexLiborMin   = indexLibor_i;
	size_t indexTime_begin = std::min(indexTime_i,indexLiborMin);
	size_t indexTime_end   = std::min(indexTime_j,indexLiborMin);

	double covIntegralValue = 0.0;

	//! Attention : only OK for piecewise const: g and h.
	for(size_t indexTime=indexTime_begin; indexTime<indexTime_end; ++indexTime)
	{
		double deltaT = this->get_LMMTenorStructure()->get_deltaT(indexTime);
		double correl_ij = correlation_->correlApprox(indexLibor_i,indexLibor_j, indexTime+1); // correl for period [indexTime,indexTime+1]
		covIntegralValue += correl_ij * deltaT 
						    * get_varSigma_timeIndexVersion(indexLibor_i,indexTime+1) * get_varSigma_timeIndexVersion(indexLibor_j,indexTime+1) ;
	}	
	return covIntegralValue;
}

