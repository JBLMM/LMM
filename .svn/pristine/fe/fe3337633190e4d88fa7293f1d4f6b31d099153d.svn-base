#include <LMM/calibration/SwaptionMarketDataManager.h>

#include <iostream>
#include <sstream>
#include <fstream>
#include <cstdlib>
#include <cmath>
#include <cassert>
#include <algorithm>

#include <LMM/helper/GenericPath.h>
#include <LMM/helper/BuildVariable.h>
#include <LMM/helper/Noise.h>
#include <LMM/numeric/Interpolation.h>

#include <LMM/pricer/LmmVanillaSwapPricer.h> // pre computing annuities and omega0

SwaptionMarketDataManager::SwaptionMarketDataManager(const LMMTenorStructure_PTR& pLMMTenorStructure)
	: pLMMTenorStructure_(pLMMTenorStructure)
{
}

const LMMTenorStructure_PTR SwaptionMarketDataManager::get_LMMTenorStructure() const { return pLMMTenorStructure_      ; }

SwaptionMarketDataContainer_PTR SwaptionMarketDataManager::parseFromMarketData(const ATMSwaptionMarketData& marketdata, const Tenor& fixedtenor, const Tenor& floattenor) const  
{
	SwaptionMarketDataContainer_PTR pSwaptionMarketDataContainer (new SwaptionMarketDataContainer() );
	pSwaptionMarketDataContainer->clear_all_data();

	throw("SwaptionMarketDataContainer::parseFromMarketData()  not already implementing for parsing from real data file");

	//const LMMTenorStructure_PTR pLMMTenorStructure = this->get_LMMTenorStructure();

	//// The last valid swap date has to be one step before the end of the timeline
	//// because the last valid libor index is N : L_i = L(T_i,T_{i+1})
	//const double& deltaT_floatingTenor = floattenor.YearFraction();  
	//const double valid_swap_end_date   = pLMMTenorStructure->get_EndDate() - deltaT_floatingTenor ; // timeline[N]

	//// the last LMM date in the model has to be lower than the last dates of market data
	//// If not, just resize the LMMTenorStructure ctntodo
	//assert(valid_swap_end_date <= marketdata.get_LIBOR_ENDDATES().back()   ) ;
	//assert(valid_swap_end_date <= marketdata.get_ZC_MATURITIES().back()    ) ;


	//this->parse_LIBORs_ZCs(marketdata,floattenor) ;
	//this->pre_cmp_Numeraire() ;

	////copy of Swaptions data

	//const Tenor & lmmTenor = pLMMTenorStructure->get_tenorType() ;

	//const unsigned int  nbCol_swaption = marketdata.get_SWPM_TERMS().size();
	//const unsigned int nbLine_swaption = marketdata.get_SWPM_MATURITIES().size();

	//// loop around ATM Swaption loaded data : strike, vol
	//for(size_t i_swpm=0;i_swpm<nbLine_swaption;++i_swpm)
	//{
	//	std::vector<VanillaSwaption> swaption_line;
	//	for(size_t j_swpm=0;j_swpm<nbCol_swaption;++j_swpm)
	//	{

	//		const double & swpm_strike     = marketdata.get_SWAPRATE_MATRIX()[i_swpm][j_swpm];
	//		const double & swpm_start_date = marketdata.get_SWPM_MATURITIES()[i_swpm] ;
	//		const double & swpm_end_date   = marketdata.get_SWPM_MATURITIES()[i_swpm] + marketdata.get_SWPM_TERMS()[j_swpm] ;

	//		if(swpm_start_date < swpm_end_date &&  swpm_end_date <= valid_swap_end_date )
	//		{
	//			//check if these dates exist in LMMTenorStructure
	//			if(pLMMTenorStructure->is_TenorDate(swpm_start_date) && pLMMTenorStructure->is_TenorDate(swpm_end_date) )
	//			{
	//				LMM::Index swpm_startIndex = pLMMTenorStructure->get_Index(swpm_start_date);
	//				LMM::Index swpm_endIndex   = pLMMTenorStructure->get_Index(swpm_end_date);

	//				assert(swpm_startIndex < swpm_endIndex);

	//				VanillaSwap swap(swpm_strike, swpm_startIndex, swpm_endIndex,  floattenor, fixedtenor, pLMMTenorStructure);
	//				VanillaSwaption swaption(swap,OptionType::CALL);

	//				this->STRIKE_VECTOR_.push_back  ( marketdata.get_SWAPRATE_MATRIX()[i_swpm][j_swpm]   ) ;
	//				this->VOLATILITY_VECTOR_.push_back( marketdata.get_VOLATILITY_MATRIX()[i_swpm][j_swpm] ) ;		
	//				this->SWAPTION_VECTOR_.push_back( swaption ) ;

	//				//! if created swaption has new maturity, push this maturity into swaption maturites vector
	//				if (std::find(SWPN_MATURITY_INDICES_.begin(), SWPN_MATURITY_INDICES_.end(), swaption.get_indexMaturity()) == SWPN_MATURITY_INDICES_.end() )
	//				{
	//					SWPN_MATURITY_INDICES_.push_back( swaption.get_indexMaturity() );
	//				}
	//			}
	//			else
	//			{

	//				std::cout<<LMM::NOTIF_MSG<<"SwaptionMarketDataContainer::parseFromMarketData() swaption skipped : start."<<swpm_start_date<<" end."<<swpm_end_date<<std::endl;
	//			}
	//		}
	//	}
	//}
	//std::sort( SWPN_MATURITY_INDICES_.begin(), SWPN_MATURITY_INDICES_.end() );

	return pSwaptionMarketDataContainer;
}

void SwaptionMarketDataManager::parse_LIBORs_ZCs(const ATMSwaptionMarketData& marketdata, const Tenor& floattenor,SwaptionMarketDataContainer_PTR pSwaptionMarketDataContainer) const 
{
	throw("SwaptionMarketDataManager::parse_LIBORs_ZCs is not yet implemented, TODO" );
	//clear_all_LIBOR_ZC();

	//const LMMTenorStructure_PTR pLMMTenorStructure = this->get_LMMTenorStructure();

	////the last date here is crucial, one have to choose the last date for StructuredData
	//// everything out of this date will be poped out
	//const double& max_lmm_date = pLMMTenorStructure->get_EndDate();

	//// retreiv LIBOR data, if libor data is not enough, the last elements will be repeated
	//const double & libor_time_step = floattenor.YearFraction();

	//// will be used for interpolation instead of timeline in LMMTenorStructure
	//// in case where LMMTenorStructure timeline contains dates more fine than libor timeline
	//std::vector<double> libor_interpolation_date; 
	//{
	//	double libor_date = libor_time_step ;     // date zero do not need to be interpolated
	//	while(libor_date <= max_lmm_date)
	//	{
	//		libor_interpolation_date.push_back(libor_date);   libor_date+= libor_time_step;
	//	}		
	//}


	//// copy libor data from market data to a buffer 
	//std::vector<double> _buffer_libor_enddate ;
	//_buffer_libor_enddate.insert( _buffer_libor_enddate.end(), marketdata.get_LIBOR_ENDDATES().begin(), marketdata.get_LIBOR_ENDDATES().end() );
	//std::vector<double> _buffer_libor          ;
	//_buffer_libor.insert( _buffer_libor.end(), marketdata.get_LIBOR().begin(), marketdata.get_LIBOR().end() );

	//// copy ZC data from market data to a buffer
	//std::vector<double> _buffer_zc_maturity ; std::vector<double> _buffer_zc ;
	//_buffer_zc_maturity.insert( _buffer_zc_maturity.end(), marketdata.get_ZC_MATURITIES().begin(), marketdata.get_ZC_MATURITIES().end() );
	//_buffer_zc.insert( _buffer_zc.end(), marketdata.get_ZC_BOND().begin(), marketdata.get_ZC_BOND().end() );


	////Interpolation
	//numeric::Interpolation interpolator;
	//size_t nbInterpoleDate = libor_interpolation_date.size() ;
	//for(auto &interpolation_date : libor_interpolation_date )
	//{
	//	interpolator.linearInterpolation(_buffer_zc   ,_buffer_zc_maturity   , interpolation_date );
	//	interpolator.linearInterpolation(_buffer_libor,_buffer_libor_enddate, interpolation_date );		
	//}

	//assert(   _buffer_zc.size()  ==     _buffer_zc_maturity.size() );
	//assert(_buffer_libor.size()  ==  _buffer_libor_enddate.size() );

	//// push interpolated libor buffer into data of this class if matching the libor timeline
	//for(unsigned int i=0;i < _buffer_libor_enddate.size() ; ++i)
	//{
	//	std::vector<double>::const_iterator it = find(libor_interpolation_date.begin(), libor_interpolation_date.end(), _buffer_libor_enddate[i]);
	//	if( it != libor_interpolation_date.end()  ) // libor date found
	//	{
	//		this->LIBOR_STARTDATES_.push_back(_buffer_libor_enddate[i] - libor_time_step);
	//		this->LIBOR_INIT_.push_back(_buffer_libor[i])      ;
	//	}
	//}

	//// push interpolated zc buffer into data of this class if matching the libor timeline
	//this->ZC_MATURITIES_.push_back(0.)       ; this->ZC_BOND_.push_back(1.)       ; //Zero Coupons has value at time zero ZC[0] = 1 --> first maturity has to be zero
	//for(unsigned int i=0;i < _buffer_zc_maturity.size() ; ++i)
	//{
	//	std::vector<double>::const_iterator it = find(libor_interpolation_date.begin(), libor_interpolation_date.end(), _buffer_zc_maturity[i]);
	//	if( it != libor_interpolation_date.end()  ) // libor date found
	//	{
	//		this->ZC_MATURITIES_.push_back(_buffer_zc_maturity[i]);
	//		this->ZC_BOND_.push_back(_buffer_zc[i])      ;
	//	}
	//}

	////LIBOR_SHIFT_.resize(LIBOR_INIT_.size(), 0.); // default values of libor shift are all zero

	//// check nbLIBOR + 1 = nbZC
	//if(this->LIBOR_STARTDATES_.size()+1 != ZC_MATURITIES_.size() )
	//{
	//	throw("error");
	//	std::cout<<LMM::ERROR_MSG << "SwaptionMarketDataContainer::parse_LIBORs_ZCs() nbLIBOR and nbZC are not coherent" <<std::endl;  
	//}
}


SwaptionMarketDataContainer_PTR SwaptionMarketDataManager::generateMarketData( const Tenor& fixedtenor, 
												   const Tenor& floattenor, 
												   LmmVanillaSwaptionApproxPricer_Rebonato* approx_ptr,
												   const double constant_rate,
												   const double strike_bump) const
{
	SwaptionMarketDataContainer_PTR pSwaptionMarketDataContainer (new SwaptionMarketDataContainer() );
	
	pSwaptionMarketDataContainer->clear_all_data();
	
	this->generateLIBOR_ZC_Data(constant_rate,pSwaptionMarketDataContainer);
	this->generateSwaptionData( fixedtenor, floattenor,approx_ptr,strike_bump, pSwaptionMarketDataContainer);

	return pSwaptionMarketDataContainer;
}


SwaptionMarketDataContainer_PTR SwaptionMarketDataManager::generateSkewData( const Tenor& fixedtenor, 
																			 const Tenor& floattenor, 
																			 LmmVanillaSwaptionApproxPricer_Rebonato* ptr,
																			 const double constant_rate,
																			 const double strike_bump) const 
{
	assert(strike_bump>0);
	SwaptionMarketDataContainer_PTR pSkewSwaptionData (new SwaptionMarketDataContainer() );
	
	this->generateLIBOR_ZC_Data(constant_rate,pSkewSwaptionData);

	{// locally create ATM_pp and ATM_mm market data in this bloc
		SwaptionMarketDataContainer_PTR pSwaptionDataATM_pp = generateMarketData(fixedtenor,floattenor,ptr,constant_rate,strike_bump);
		SwaptionMarketDataContainer_PTR pSwaptionDataATM_mm = generateMarketData(fixedtenor,floattenor,ptr,constant_rate,-strike_bump);

		pSkewSwaptionData->clear_all_SWAPTION_DATA();
		
		pSkewSwaptionData->swaption_sparse_step_ = pSwaptionDataATM_pp->swaption_sparse_step_;
				
		pSkewSwaptionData->SWAPTION_VECTOR_      = pSwaptionDataATM_pp->SWAPTION_VECTOR_       ;
		pSkewSwaptionData->HGVOL_VECTOR_INDICES_ = pSwaptionDataATM_pp->HGVOL_VECTOR_INDICES_  ;
		pSkewSwaptionData->SWPN_MATURITY_INDICES_= pSwaptionDataATM_pp->SWPN_MATURITY_INDICES_ ;

		size_t nbSwaption = pSwaptionDataATM_pp->get_nbSWAPTION();
		assert(nbSwaption == pSwaptionDataATM_pp->STRIKE_VECTOR_.size());
		assert(nbSwaption == pSwaptionDataATM_mm->STRIKE_VECTOR_.size());

		pSkewSwaptionData->STRIKE_VECTOR_.resize(nbSwaption);
		pSkewSwaptionData->VOLATILITY_VECTOR_.resize(nbSwaption);
		for(size_t iSwaption=0;iSwaption<nbSwaption;++iSwaption)
		{
			const double & strike_pp = pSwaptionDataATM_pp->STRIKE_VECTOR_[iSwaption];
			const double & strike_mm = pSwaptionDataATM_mm->STRIKE_VECTOR_[iSwaption];
			const double & vol_pp    = pSwaptionDataATM_pp->VOLATILITY_VECTOR_[iSwaption];
			const double & vol_mm    = pSwaptionDataATM_mm->VOLATILITY_VECTOR_[iSwaption];
			
			const double strike   = 0.5 * (strike_pp + strike_mm);
			const double skew_vol = NumericalMethods::df(vol_pp,vol_mm,strike_bump);

			pSkewSwaptionData->STRIKE_VECTOR_[iSwaption]     = strike   ;
			pSkewSwaptionData->VOLATILITY_VECTOR_[iSwaption] = skew_vol ;			
		}		

		pSwaptionDataATM_pp.reset();
		pSwaptionDataATM_mm.reset();
	}
	pSkewSwaptionData->refresh_AllSwaptionStrike()     ;
	pSkewSwaptionData->build_MatrixDataFromVectorData();

	pSkewSwaptionData->strike_bump_ = strike_bump;

	return pSkewSwaptionData;
}


void SwaptionMarketDataManager::generateSwaptionData(const Tenor& fixedtenor, const Tenor& floattenor, LmmVanillaSwaptionApproxPricer_Rebonato* approx_ptr,const double strike_bump, SwaptionMarketDataContainer_PTR pData) const
{
	pData->clear_all_SWAPTION_DATA();

	pData->swaption_sparse_step_ = fixedtenor.ratioTo(floattenor); // =2 when fixed/float tenors are 1YR/6M 

	assert(floattenor == pLMMTenorStructure_->get_tenorType() );

	//size_t specific_swaption_maturity_index = specific_swaption_maturity * ( 12/floattenor.NbOfMonth() ) ;

	size_t fixed_float_ratio = pData->get_SwaptionSparseStep() ;

	size_t highestLIBORIndex = pLMMTenorStructure_->get_horizon(); // N
	assert( highestLIBORIndex % fixed_float_ratio ==0 );

	for(size_t iStartSwaption=fixed_float_ratio;iStartSwaption<highestLIBORIndex;iStartSwaption+=fixed_float_ratio)
	{
		for(size_t jEndSwaption=iStartSwaption+fixed_float_ratio ; jEndSwaption <= highestLIBORIndex ; jEndSwaption +=fixed_float_ratio )
		{
			VanillaSwap swap(-10000,iStartSwaption,jEndSwaption,floattenor,fixedtenor,pLMMTenorStructure_);

			double swaprate_T0 = approx_ptr->swapRate_Analytical(swap,pData->LIBOR_INIT_);
			
			double strike = swaprate_T0 + strike_bump;
			swap.set_strike(strike);

			VanillaSwaption swaption(swap, OptionType::CALL);

			double approx_vol = approx_ptr->volBlack(swaption,pData->LIBOR_INIT_);

			pData->STRIKE_VECTOR_.push_back(strike);
			pData->VOLATILITY_VECTOR_.push_back(approx_vol);
			pData->SWAPTION_VECTOR_.push_back(swaption);

			//! if created swaption has new maturity, push this maturity into swaption maturites vector
			if (std::find(pData->SWPN_MATURITY_INDICES_.begin(), pData->SWPN_MATURITY_INDICES_.end(), swaption.get_indexMaturity()) == pData->SWPN_MATURITY_INDICES_.end() )
			{
				pData->SWPN_MATURITY_INDICES_.push_back( swaption.get_indexMaturity() );
			}
		}	
	}
	std::sort( pData->SWPN_MATURITY_INDICES_.begin(), pData->SWPN_MATURITY_INDICES_.end() );// maturities store in a increase order


	//!  create all pair indices in the hg vol matrix that match with swaption
	for(size_t i_swaption=0;i_swaption<pData->SWAPTION_VECTOR_.size();++i_swaption)
	{
		const VanillaSwap& swap = pData->SWAPTION_VECTOR_[i_swaption].getUnderlyingSwap();
		size_t maturity_swaption_index = swap.get_indexStart() ;
		size_t end_swaption_index      = swap.get_indexEnd()   ;
		for(size_t liborIndex =fixed_float_ratio ; liborIndex < end_swaption_index ; liborIndex+=fixed_float_ratio)// not take in account the last libor dependant
		{
			size_t max_time_index = std::min(maturity_swaption_index,liborIndex);
			for(size_t timeIndex =fixed_float_ratio ; timeIndex <=  max_time_index ; timeIndex+=fixed_float_ratio)// not take in account greater than maturity time
			{
				std::pair<size_t,size_t> indices_pair(liborIndex,timeIndex);

				//! push if this index pair is not already added
				if( std::find(pData->HGVOL_VECTOR_INDICES_.begin(), pData->HGVOL_VECTOR_INDICES_.end(), indices_pair ) == pData->HGVOL_VECTOR_INDICES_.end()  )
				{
					pData->HGVOL_VECTOR_INDICES_.push_back(indices_pair);
				}
			}	
		}
	}
	std::sort( pData->HGVOL_VECTOR_INDICES_.begin(), pData->HGVOL_VECTOR_INDICES_.end() );// indices of swaption matrix store line by line

	pData->build_MatrixDataFromVectorData();
}


void SwaptionMarketDataManager::generateLIBOR_ZC_Data(const double constant_rate, SwaptionMarketDataContainer_PTR pData) const
{
	pData->clear_all_data();

	pData->ZC_MATURITIES_ = pLMMTenorStructure_->get_tenorDate() ;
	size_t nbZC =  pData->ZC_MATURITIES_.size() ;
	
	pData->ZC_BOND_.resize( nbZC );
	for(size_t i=0;i<nbZC;++i)
	{
		const double& T_i = pData->ZC_MATURITIES_[i];
		pData->ZC_BOND_[i]= std::exp( - (constant_rate * T_i) );
	}

	pData->LIBOR_STARTDATES_ = pData->ZC_MATURITIES_; pData->LIBOR_STARTDATES_.pop_back();
	size_t nbLIBOR = pData->LIBOR_STARTDATES_.size();
	assert(nbLIBOR ==  pLMMTenorStructure_->get_nbLIBOR() );
	pData->LIBOR_INIT_.resize(nbLIBOR);
	for(size_t i=0;i<nbLIBOR;++i)
	{
		double delta_T_i = pLMMTenorStructure_->get_deltaT(i) ;

		pData->LIBOR_INIT_[i] = (1./delta_T_i) * ( pData->ZC_BOND_[i]/ pData->ZC_BOND_[i+1] - 1 );
	}

	pData->compute_numeraire()    ;
}